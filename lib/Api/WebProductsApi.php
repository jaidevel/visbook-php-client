<?php
/**
 * WebProductsApi
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * VisBook booking-API
 *
 * ## About localization/internationalization We currently support 6 languages: **Norwegian, English, Swedish, Danish, German, Russian**,  The fallback language is always **english**.  Translations are used for products and properties returned by the api, but the quality will depend on the hotel to have provided translations in the requested language.   Specify the language you want to use by using the [Accept-Language](https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Accept-Language) header.  ## About reservations  Once you make a reservation, you take up capacity at the hotel. Reservations must be kept alive every 40 seconds, else they expire to free up the capacity. When doing checkout (i.e when the user is sent to the payment processor), the expiration of the reservation is extended by 20 minutes. This means you do not need to ping the api while the user is \"away\" doing payment.   There is a **hard limit of 30 minutes before reservations are expired** no questions asked.**   This is to avoid someone holding capacity indefinitely.  ## About authorization Before a guest is able to do payment/checkout, the guest must have a valid cookie. This is obtained by doing the login/validation flow. The `/login` request sends the user a one-time-passord on the selected medium (email, sms). This code must be returned to us via the `/validation` endpoint within reasonable time. `/validation` will return a httpOnly cookie, which must be present when doing `/checkout`. This cookie must also be present if you want to use endpoints that relate to customer data, like `/orders` and `/user`.   `/validation` also returns customer data, *if the customer exists*, which can be used to \"pre-fill\" customer data for checkout.  ## About checkout #### Amount The client is responsible for calculating an `amount`, which is the amount the guest should pay. This serves as a security mechanism, to see that the client and server *agrees* on the amount, to make sure there hasn't been any \"mismatch\" between client and server.  #### PaymentType The client should make a call to `/checkout/paymentTypes` to see which payment types are available.  #### Terms The client should make a call to `/setup/terms` to present the terms to the user. Checkout is only possible if `acceptedTerms` is `true`.  #### Error/Success Upon success, the user will be forwarded to `successUrl`, with `orderGroup` as a query parameter. Example: https://reservations.visbook.com/5252/order?orderGroupId=1111111   You can then use orderGroupId to call `/ordergroups/{id}` to present an online order confirmation. Sms/Email order confirmation is handled by the api automatically.  Upon error, the user will be forwarded to `errorUrl` with the query parameter `errorCode`. Example: https://reservations.visbook.com/1047/checkout?errorCode=1  Where errorCode conforms to the following table:  | ErrorCode | Description | | --------- | ----------- |  | 1 | Unable to reserve the amount on the card. Contact card issuer. | | 2 | Unable to capture the amount on the card. Contact card issuer. | | 3 | Unable to query the payment provider about the transaction. Contact the hotel. | | 4 | Unable to annul (refund) the transaction. Contact the hotel. | | 6 | Unable to set order to status paid. Contact the hotel. | | 7 | Unknown response from the payment processor. Contact the hotel. | | 8 | Unable to find the order. Contact the hotel. | | 9 | The order has been modified by someone else. Contact the hotel. | | 10 | Unable to save the order. Accounting error due to amount being lower than required fixed amount on this account. Contact the hotel. | | 11 | Unable to save the order, there's an error with the price. Contact the hotel. | | 12 | Unable to save the order, the invoice customer was not found. Contact the hotel. | | 13 | Some reservations have expired. Try again. | | 14 | Unable to process sale. Contact card issuer. |  ## General flow  1. Create product reservations via `/reservations` endpoint 2. Keep reservations alive every 30-40 seconds via `/reservations/ping` (If you don't your reservations will expire) 3. Authorize guest via /login and /validation to receive a cookie you can use to checkout 4. Complete the order via /checkout. The guest _must_ be authorized before this step is possible.
 *
 * OpenAPI spec version: 8.38.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.36
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use Swagger\Client\ApiException;
use Swagger\Client\Configuration;
use Swagger\Client\HeaderSelector;
use Swagger\Client\ObjectSerializer;

/**
 * WebProductsApi Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class WebProductsApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation apiWebentityWebproductsFromToGet
     *
     * Get list of web products for the period for company and related companies.  Optional filter by product group(s) or/and property(ies).
     *
     * @param  \DateTime $from Gets or sets from date. Format yyyy-MM-dd. (required)
     * @param  \DateTime $to Gets or sets to date. Format yyyy-MM-dd. (required)
     * @param  int $webentity webentity (required)
     * @param  int[] $groups Gets or sets filter. Possible usage : ?groups&#x3D;1,2,3. (optional)
     * @param  map[string,string] $attributes Gets or sets attributes for filtering.  Possible usage : ?attributes[mountainView]&#x3D;true&amp;attributes[haveWifi]&#x3D;true&amp;attributes[baths]&#x3D;1. (optional)
     * @param  int $number_of_persons Gets or sets number of people. (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\WebProductsResponseViewModel
     */
    public function apiWebentityWebproductsFromToGet($from, $to, $webentity, $groups = null, $attributes = null, $number_of_persons = null)
    {
        list($response) = $this->apiWebentityWebproductsFromToGetWithHttpInfo($from, $to, $webentity, $groups, $attributes, $number_of_persons);
        return $response;
    }

    /**
     * Operation apiWebentityWebproductsFromToGetWithHttpInfo
     *
     * Get list of web products for the period for company and related companies.  Optional filter by product group(s) or/and property(ies).
     *
     * @param  \DateTime $from Gets or sets from date. Format yyyy-MM-dd. (required)
     * @param  \DateTime $to Gets or sets to date. Format yyyy-MM-dd. (required)
     * @param  int $webentity (required)
     * @param  int[] $groups Gets or sets filter. Possible usage : ?groups&#x3D;1,2,3. (optional)
     * @param  map[string,string] $attributes Gets or sets attributes for filtering.  Possible usage : ?attributes[mountainView]&#x3D;true&amp;attributes[haveWifi]&#x3D;true&amp;attributes[baths]&#x3D;1. (optional)
     * @param  int $number_of_persons Gets or sets number of people. (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\WebProductsResponseViewModel, HTTP status code, HTTP response headers (array of strings)
     */
    public function apiWebentityWebproductsFromToGetWithHttpInfo($from, $to, $webentity, $groups = null, $attributes = null, $number_of_persons = null)
    {
        $returnType = '\Swagger\Client\Model\WebProductsResponseViewModel';
        $request = $this->apiWebentityWebproductsFromToGetRequest($from, $to, $webentity, $groups, $attributes, $number_of_persons);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\WebProductsResponseViewModel',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation apiWebentityWebproductsFromToGetAsync
     *
     * Get list of web products for the period for company and related companies.  Optional filter by product group(s) or/and property(ies).
     *
     * @param  \DateTime $from Gets or sets from date. Format yyyy-MM-dd. (required)
     * @param  \DateTime $to Gets or sets to date. Format yyyy-MM-dd. (required)
     * @param  int $webentity (required)
     * @param  int[] $groups Gets or sets filter. Possible usage : ?groups&#x3D;1,2,3. (optional)
     * @param  map[string,string] $attributes Gets or sets attributes for filtering.  Possible usage : ?attributes[mountainView]&#x3D;true&amp;attributes[haveWifi]&#x3D;true&amp;attributes[baths]&#x3D;1. (optional)
     * @param  int $number_of_persons Gets or sets number of people. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiWebentityWebproductsFromToGetAsync($from, $to, $webentity, $groups = null, $attributes = null, $number_of_persons = null)
    {
        return $this->apiWebentityWebproductsFromToGetAsyncWithHttpInfo($from, $to, $webentity, $groups, $attributes, $number_of_persons)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation apiWebentityWebproductsFromToGetAsyncWithHttpInfo
     *
     * Get list of web products for the period for company and related companies.  Optional filter by product group(s) or/and property(ies).
     *
     * @param  \DateTime $from Gets or sets from date. Format yyyy-MM-dd. (required)
     * @param  \DateTime $to Gets or sets to date. Format yyyy-MM-dd. (required)
     * @param  int $webentity (required)
     * @param  int[] $groups Gets or sets filter. Possible usage : ?groups&#x3D;1,2,3. (optional)
     * @param  map[string,string] $attributes Gets or sets attributes for filtering.  Possible usage : ?attributes[mountainView]&#x3D;true&amp;attributes[haveWifi]&#x3D;true&amp;attributes[baths]&#x3D;1. (optional)
     * @param  int $number_of_persons Gets or sets number of people. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiWebentityWebproductsFromToGetAsyncWithHttpInfo($from, $to, $webentity, $groups = null, $attributes = null, $number_of_persons = null)
    {
        $returnType = '\Swagger\Client\Model\WebProductsResponseViewModel';
        $request = $this->apiWebentityWebproductsFromToGetRequest($from, $to, $webentity, $groups, $attributes, $number_of_persons);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'apiWebentityWebproductsFromToGet'
     *
     * @param  \DateTime $from Gets or sets from date. Format yyyy-MM-dd. (required)
     * @param  \DateTime $to Gets or sets to date. Format yyyy-MM-dd. (required)
     * @param  int $webentity (required)
     * @param  int[] $groups Gets or sets filter. Possible usage : ?groups&#x3D;1,2,3. (optional)
     * @param  map[string,string] $attributes Gets or sets attributes for filtering.  Possible usage : ?attributes[mountainView]&#x3D;true&amp;attributes[haveWifi]&#x3D;true&amp;attributes[baths]&#x3D;1. (optional)
     * @param  int $number_of_persons Gets or sets number of people. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function apiWebentityWebproductsFromToGetRequest($from, $to, $webentity, $groups = null, $attributes = null, $number_of_persons = null)
    {
        // verify the required parameter 'from' is set
        if ($from === null || (is_array($from) && count($from) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $from when calling apiWebentityWebproductsFromToGet'
            );
        }
        // verify the required parameter 'to' is set
        if ($to === null || (is_array($to) && count($to) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $to when calling apiWebentityWebproductsFromToGet'
            );
        }
        // verify the required parameter 'webentity' is set
        if ($webentity === null || (is_array($webentity) && count($webentity) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $webentity when calling apiWebentityWebproductsFromToGet'
            );
        }

        $resourcePath = '/api/{webentity}/webproducts/{from}/{to}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if (is_array($groups)) {
            $groups = ObjectSerializer::serializeCollection($groups, 'multi', true);
        }
        if ($groups !== null) {
            $queryParams['groups'] = ObjectSerializer::toQueryValue($groups, 'int32');
        }
        // query params
        if (is_array($attributes)) {
            $attributes = ObjectSerializer::serializeCollection($attributes, 'multi', true);
        }
        if ($attributes !== null) {
            $queryParams['attributes'] = ObjectSerializer::toQueryValue($attributes, null);
        }
        // query params
        if ($number_of_persons !== null) {
            $queryParams['numberOfPersons'] = ObjectSerializer::toQueryValue($number_of_persons, 'int32');
        }

        // path params
        if ($from !== null) {
            $resourcePath = str_replace(
                '{' . 'from' . '}',
                ObjectSerializer::toPathValue($from),
                $resourcePath
            );
        }
        // path params
        if ($to !== null) {
            $resourcePath = str_replace(
                '{' . 'to' . '}',
                ObjectSerializer::toPathValue($to),
                $resourcePath
            );
        }
        // path params
        if ($webentity !== null) {
            $resourcePath = str_replace(
                '{' . 'webentity' . '}',
                ObjectSerializer::toPathValue($webentity),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation apiWebentityWebproductsFromToWebProductIdGet
     *
     * Get web product by Id.
     *
     * @param  int $web_product_id Gets or sets web product Id. (required)
     * @param  \DateTime $from Gets or sets from date. Format yyyy-MM-dd. (required)
     * @param  \DateTime $to Gets or sets to date. Format yyyy-MM-dd. (required)
     * @param  int $webentity webentity (required)
     * @param  int $number_of_persons Gets or sets number of people. (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\WebProductViewModel
     */
    public function apiWebentityWebproductsFromToWebProductIdGet($web_product_id, $from, $to, $webentity, $number_of_persons = null)
    {
        list($response) = $this->apiWebentityWebproductsFromToWebProductIdGetWithHttpInfo($web_product_id, $from, $to, $webentity, $number_of_persons);
        return $response;
    }

    /**
     * Operation apiWebentityWebproductsFromToWebProductIdGetWithHttpInfo
     *
     * Get web product by Id.
     *
     * @param  int $web_product_id Gets or sets web product Id. (required)
     * @param  \DateTime $from Gets or sets from date. Format yyyy-MM-dd. (required)
     * @param  \DateTime $to Gets or sets to date. Format yyyy-MM-dd. (required)
     * @param  int $webentity (required)
     * @param  int $number_of_persons Gets or sets number of people. (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\WebProductViewModel, HTTP status code, HTTP response headers (array of strings)
     */
    public function apiWebentityWebproductsFromToWebProductIdGetWithHttpInfo($web_product_id, $from, $to, $webentity, $number_of_persons = null)
    {
        $returnType = '\Swagger\Client\Model\WebProductViewModel';
        $request = $this->apiWebentityWebproductsFromToWebProductIdGetRequest($web_product_id, $from, $to, $webentity, $number_of_persons);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\WebProductViewModel',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\NotFoundResult',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation apiWebentityWebproductsFromToWebProductIdGetAsync
     *
     * Get web product by Id.
     *
     * @param  int $web_product_id Gets or sets web product Id. (required)
     * @param  \DateTime $from Gets or sets from date. Format yyyy-MM-dd. (required)
     * @param  \DateTime $to Gets or sets to date. Format yyyy-MM-dd. (required)
     * @param  int $webentity (required)
     * @param  int $number_of_persons Gets or sets number of people. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiWebentityWebproductsFromToWebProductIdGetAsync($web_product_id, $from, $to, $webentity, $number_of_persons = null)
    {
        return $this->apiWebentityWebproductsFromToWebProductIdGetAsyncWithHttpInfo($web_product_id, $from, $to, $webentity, $number_of_persons)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation apiWebentityWebproductsFromToWebProductIdGetAsyncWithHttpInfo
     *
     * Get web product by Id.
     *
     * @param  int $web_product_id Gets or sets web product Id. (required)
     * @param  \DateTime $from Gets or sets from date. Format yyyy-MM-dd. (required)
     * @param  \DateTime $to Gets or sets to date. Format yyyy-MM-dd. (required)
     * @param  int $webentity (required)
     * @param  int $number_of_persons Gets or sets number of people. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiWebentityWebproductsFromToWebProductIdGetAsyncWithHttpInfo($web_product_id, $from, $to, $webentity, $number_of_persons = null)
    {
        $returnType = '\Swagger\Client\Model\WebProductViewModel';
        $request = $this->apiWebentityWebproductsFromToWebProductIdGetRequest($web_product_id, $from, $to, $webentity, $number_of_persons);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'apiWebentityWebproductsFromToWebProductIdGet'
     *
     * @param  int $web_product_id Gets or sets web product Id. (required)
     * @param  \DateTime $from Gets or sets from date. Format yyyy-MM-dd. (required)
     * @param  \DateTime $to Gets or sets to date. Format yyyy-MM-dd. (required)
     * @param  int $webentity (required)
     * @param  int $number_of_persons Gets or sets number of people. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function apiWebentityWebproductsFromToWebProductIdGetRequest($web_product_id, $from, $to, $webentity, $number_of_persons = null)
    {
        // verify the required parameter 'web_product_id' is set
        if ($web_product_id === null || (is_array($web_product_id) && count($web_product_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $web_product_id when calling apiWebentityWebproductsFromToWebProductIdGet'
            );
        }
        // verify the required parameter 'from' is set
        if ($from === null || (is_array($from) && count($from) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $from when calling apiWebentityWebproductsFromToWebProductIdGet'
            );
        }
        // verify the required parameter 'to' is set
        if ($to === null || (is_array($to) && count($to) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $to when calling apiWebentityWebproductsFromToWebProductIdGet'
            );
        }
        // verify the required parameter 'webentity' is set
        if ($webentity === null || (is_array($webentity) && count($webentity) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $webentity when calling apiWebentityWebproductsFromToWebProductIdGet'
            );
        }

        $resourcePath = '/api/{webentity}/webproducts/{from}/{to}/{webProductId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($number_of_persons !== null) {
            $queryParams['numberOfPersons'] = ObjectSerializer::toQueryValue($number_of_persons, 'int32');
        }

        // path params
        if ($web_product_id !== null) {
            $resourcePath = str_replace(
                '{' . 'webProductId' . '}',
                ObjectSerializer::toPathValue($web_product_id),
                $resourcePath
            );
        }
        // path params
        if ($from !== null) {
            $resourcePath = str_replace(
                '{' . 'from' . '}',
                ObjectSerializer::toPathValue($from),
                $resourcePath
            );
        }
        // path params
        if ($to !== null) {
            $resourcePath = str_replace(
                '{' . 'to' . '}',
                ObjectSerializer::toPathValue($to),
                $resourcePath
            );
        }
        // path params
        if ($webentity !== null) {
            $resourcePath = str_replace(
                '{' . 'webentity' . '}',
                ObjectSerializer::toPathValue($webentity),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation apiWebentityWebproductsGet
     *
     * Get all web products for company and related companies.  Optional filter by product group(s) or/and property(ies).
     *
     * @param  int $webentity webentity (required)
     * @param  int[] $groups Gets or sets filter. Possible usage : ?groups&#x3D;1,2,3. (optional)
     * @param  map[string,string] $attributes Gets or sets attributes for filtering.  Possible usage : ?attributes[mountainView]&#x3D;true&amp;attributes[haveWifi]&#x3D;true&amp;attributes[baths]&#x3D;1. (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\WebProductUnitViewModel[]
     */
    public function apiWebentityWebproductsGet($webentity, $groups = null, $attributes = null)
    {
        list($response) = $this->apiWebentityWebproductsGetWithHttpInfo($webentity, $groups, $attributes);
        return $response;
    }

    /**
     * Operation apiWebentityWebproductsGetWithHttpInfo
     *
     * Get all web products for company and related companies.  Optional filter by product group(s) or/and property(ies).
     *
     * @param  int $webentity (required)
     * @param  int[] $groups Gets or sets filter. Possible usage : ?groups&#x3D;1,2,3. (optional)
     * @param  map[string,string] $attributes Gets or sets attributes for filtering.  Possible usage : ?attributes[mountainView]&#x3D;true&amp;attributes[haveWifi]&#x3D;true&amp;attributes[baths]&#x3D;1. (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\WebProductUnitViewModel[], HTTP status code, HTTP response headers (array of strings)
     */
    public function apiWebentityWebproductsGetWithHttpInfo($webentity, $groups = null, $attributes = null)
    {
        $returnType = '\Swagger\Client\Model\WebProductUnitViewModel[]';
        $request = $this->apiWebentityWebproductsGetRequest($webentity, $groups, $attributes);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\WebProductUnitViewModel[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation apiWebentityWebproductsGetAsync
     *
     * Get all web products for company and related companies.  Optional filter by product group(s) or/and property(ies).
     *
     * @param  int $webentity (required)
     * @param  int[] $groups Gets or sets filter. Possible usage : ?groups&#x3D;1,2,3. (optional)
     * @param  map[string,string] $attributes Gets or sets attributes for filtering.  Possible usage : ?attributes[mountainView]&#x3D;true&amp;attributes[haveWifi]&#x3D;true&amp;attributes[baths]&#x3D;1. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiWebentityWebproductsGetAsync($webentity, $groups = null, $attributes = null)
    {
        return $this->apiWebentityWebproductsGetAsyncWithHttpInfo($webentity, $groups, $attributes)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation apiWebentityWebproductsGetAsyncWithHttpInfo
     *
     * Get all web products for company and related companies.  Optional filter by product group(s) or/and property(ies).
     *
     * @param  int $webentity (required)
     * @param  int[] $groups Gets or sets filter. Possible usage : ?groups&#x3D;1,2,3. (optional)
     * @param  map[string,string] $attributes Gets or sets attributes for filtering.  Possible usage : ?attributes[mountainView]&#x3D;true&amp;attributes[haveWifi]&#x3D;true&amp;attributes[baths]&#x3D;1. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiWebentityWebproductsGetAsyncWithHttpInfo($webentity, $groups = null, $attributes = null)
    {
        $returnType = '\Swagger\Client\Model\WebProductUnitViewModel[]';
        $request = $this->apiWebentityWebproductsGetRequest($webentity, $groups, $attributes);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'apiWebentityWebproductsGet'
     *
     * @param  int $webentity (required)
     * @param  int[] $groups Gets or sets filter. Possible usage : ?groups&#x3D;1,2,3. (optional)
     * @param  map[string,string] $attributes Gets or sets attributes for filtering.  Possible usage : ?attributes[mountainView]&#x3D;true&amp;attributes[haveWifi]&#x3D;true&amp;attributes[baths]&#x3D;1. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function apiWebentityWebproductsGetRequest($webentity, $groups = null, $attributes = null)
    {
        // verify the required parameter 'webentity' is set
        if ($webentity === null || (is_array($webentity) && count($webentity) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $webentity when calling apiWebentityWebproductsGet'
            );
        }

        $resourcePath = '/api/{webentity}/webproducts';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if (is_array($groups)) {
            $groups = ObjectSerializer::serializeCollection($groups, 'multi', true);
        }
        if ($groups !== null) {
            $queryParams['groups'] = ObjectSerializer::toQueryValue($groups, 'int32');
        }
        // query params
        if (is_array($attributes)) {
            $attributes = ObjectSerializer::serializeCollection($attributes, 'multi', true);
        }
        if ($attributes !== null) {
            $queryParams['attributes'] = ObjectSerializer::toQueryValue($attributes, null);
        }

        // path params
        if ($webentity !== null) {
            $resourcePath = str_replace(
                '{' . 'webentity' . '}',
                ObjectSerializer::toPathValue($webentity),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
