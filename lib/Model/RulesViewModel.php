<?php
/**
 * RulesViewModel
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * VisBook booking-API
 *
 * ## About localization/internationalization We currently support 6 languages: **Norwegian, English, Swedish, Danish, German, Russian**,  The fallback language is always **english**.  Translations are used for products and properties returned by the api, but the quality will depend on the hotel to have provided translations in the requested language.   Specify the language you want to use by using the [Accept-Language](https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Accept-Language) header.  ## About reservations  Once you make a reservation, you take up capacity at the hotel. Reservations must be kept alive every 40 seconds, else they expire to free up the capacity. When doing checkout (i.e when the user is sent to the payment processor), the expiration of the reservation is extended by 20 minutes. This means you do not need to ping the api while the user is \"away\" doing payment.   There is a **hard limit of 30 minutes before reservations are expired** no questions asked.**   This is to avoid someone holding capacity indefinitely.  ## About authorization Before a guest is able to do payment/checkout, the guest must have a valid cookie. This is obtained by doing the login/validation flow. The `/login` request sends the user a one-time-passord on the selected medium (email, sms). This code must be returned to us via the `/validation` endpoint within reasonable time. `/validation` will return a httpOnly cookie, which must be present when doing `/checkout`. This cookie must also be present if you want to use endpoints that relate to customer data, like `/orders` and `/user`.   `/validation` also returns customer data, *if the customer exists*, which can be used to \"pre-fill\" customer data for checkout.  ## About checkout #### Amount The client is responsible for calculating an `amount`, which is the amount the guest should pay. This serves as a security mechanism, to see that the client and server *agrees* on the amount, to make sure there hasn't been any \"mismatch\" between client and server.  #### PaymentType The client should make a call to `/checkout/paymentTypes` to see which payment types are available.  #### Terms The client should make a call to `/setup/terms` to present the terms to the user. Checkout is only possible if `acceptedTerms` is `true`.  #### Error/Success Upon success, the user will be forwarded to `successUrl`, with `orderGroup` as a query parameter. Example: https://reservations.visbook.com/5252/order?orderGroupId=1111111   You can then use orderGroupId to call `/ordergroups/{id}` to present an online order confirmation. Sms/Email order confirmation is handled by the api automatically.  Upon error, the user will be forwarded to `errorUrl` with the query parameter `errorCode`. Example: https://reservations.visbook.com/1047/checkout?errorCode=1  Where errorCode conforms to the following table:  | ErrorCode | Description | | --------- | ----------- |  | 1 | Unable to reserve the amount on the card. Contact card issuer. | | 2 | Unable to capture the amount on the card. Contact card issuer. | | 3 | Unable to query the payment provider about the transaction. Contact the hotel. | | 4 | Unable to annul (refund) the transaction. Contact the hotel. | | 6 | Unable to set order to status paid. Contact the hotel. | | 7 | Unknown response from the payment processor. Contact the hotel. | | 8 | Unable to find the order. Contact the hotel. | | 9 | The order has been modified by someone else. Contact the hotel. | | 10 | Unable to save the order. Accounting error due to amount being lower than required fixed amount on this account. Contact the hotel. | | 11 | Unable to save the order, there's an error with the price. Contact the hotel. | | 12 | Unable to save the order, the invoice customer was not found. Contact the hotel. | | 13 | Some reservations have expired. Try again. | | 14 | Unable to process sale. Contact card issuer. |  ## General flow  1. Create product reservations via `/reservations` endpoint 2. Keep reservations alive every 30-40 seconds via `/reservations/ping` (If you don't your reservations will expire) 3. Authorize guest via /login and /validation to receive a cookie you can use to checkout 4. Complete the order via /checkout. The guest _must_ be authorized before this step is possible.
 *
 * OpenAPI spec version: 8.38.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.36
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * RulesViewModel Class Doc Comment
 *
 * @category Class
 * @description Contains info about service rules.
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class RulesViewModel implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'RulesViewModel';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'min_value_type' => '\Swagger\Client\Model\SourceNumberOfPersonsViewModel',
'max_value_type' => '\Swagger\Client\Model\SourceNumberOfPersonsViewModel',
'min_value' => 'int',
'max_value' => 'int',
'implies' => '\Swagger\Client\Model\BaseServiceViewModel[]',
'excludes' => '\Swagger\Client\Model\BaseServiceViewModel[]',
'selected_by_default' => 'bool'    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'min_value_type' => null,
'max_value_type' => null,
'min_value' => 'int32',
'max_value' => 'int32',
'implies' => null,
'excludes' => null,
'selected_by_default' => null    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'min_value_type' => 'minValueType',
'max_value_type' => 'maxValueType',
'min_value' => 'minValue',
'max_value' => 'maxValue',
'implies' => 'implies',
'excludes' => 'excludes',
'selected_by_default' => 'selectedByDefault'    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'min_value_type' => 'setMinValueType',
'max_value_type' => 'setMaxValueType',
'min_value' => 'setMinValue',
'max_value' => 'setMaxValue',
'implies' => 'setImplies',
'excludes' => 'setExcludes',
'selected_by_default' => 'setSelectedByDefault'    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'min_value_type' => 'getMinValueType',
'max_value_type' => 'getMaxValueType',
'min_value' => 'getMinValue',
'max_value' => 'getMaxValue',
'implies' => 'getImplies',
'excludes' => 'getExcludes',
'selected_by_default' => 'getSelectedByDefault'    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['min_value_type'] = isset($data['min_value_type']) ? $data['min_value_type'] : null;
        $this->container['max_value_type'] = isset($data['max_value_type']) ? $data['max_value_type'] : null;
        $this->container['min_value'] = isset($data['min_value']) ? $data['min_value'] : null;
        $this->container['max_value'] = isset($data['max_value']) ? $data['max_value'] : null;
        $this->container['implies'] = isset($data['implies']) ? $data['implies'] : null;
        $this->container['excludes'] = isset($data['excludes']) ? $data['excludes'] : null;
        $this->container['selected_by_default'] = isset($data['selected_by_default']) ? $data['selected_by_default'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets min_value_type
     *
     * @return \Swagger\Client\Model\SourceNumberOfPersonsViewModel
     */
    public function getMinValueType()
    {
        return $this->container['min_value_type'];
    }

    /**
     * Sets min_value_type
     *
     * @param \Swagger\Client\Model\SourceNumberOfPersonsViewModel $min_value_type min_value_type
     *
     * @return $this
     */
    public function setMinValueType($min_value_type)
    {
        $this->container['min_value_type'] = $min_value_type;

        return $this;
    }

    /**
     * Gets max_value_type
     *
     * @return \Swagger\Client\Model\SourceNumberOfPersonsViewModel
     */
    public function getMaxValueType()
    {
        return $this->container['max_value_type'];
    }

    /**
     * Sets max_value_type
     *
     * @param \Swagger\Client\Model\SourceNumberOfPersonsViewModel $max_value_type max_value_type
     *
     * @return $this
     */
    public function setMaxValueType($max_value_type)
    {
        $this->container['max_value_type'] = $max_value_type;

        return $this;
    }

    /**
     * Gets min_value
     *
     * @return int
     */
    public function getMinValue()
    {
        return $this->container['min_value'];
    }

    /**
     * Sets min_value
     *
     * @param int $min_value Gets or sets min persona value.
     *
     * @return $this
     */
    public function setMinValue($min_value)
    {
        $this->container['min_value'] = $min_value;

        return $this;
    }

    /**
     * Gets max_value
     *
     * @return int
     */
    public function getMaxValue()
    {
        return $this->container['max_value'];
    }

    /**
     * Sets max_value
     *
     * @param int $max_value Gets or sets max persona value.
     *
     * @return $this
     */
    public function setMaxValue($max_value)
    {
        $this->container['max_value'] = $max_value;

        return $this;
    }

    /**
     * Gets implies
     *
     * @return \Swagger\Client\Model\BaseServiceViewModel[]
     */
    public function getImplies()
    {
        return $this->container['implies'];
    }

    /**
     * Sets implies
     *
     * @param \Swagger\Client\Model\BaseServiceViewModel[] $implies Gets or sets other services that must be added if this services is added.
     *
     * @return $this
     */
    public function setImplies($implies)
    {
        $this->container['implies'] = $implies;

        return $this;
    }

    /**
     * Gets excludes
     *
     * @return \Swagger\Client\Model\BaseServiceViewModel[]
     */
    public function getExcludes()
    {
        return $this->container['excludes'];
    }

    /**
     * Sets excludes
     *
     * @param \Swagger\Client\Model\BaseServiceViewModel[] $excludes Gets or sets other services that must be added if this services is added.
     *
     * @return $this
     */
    public function setExcludes($excludes)
    {
        $this->container['excludes'] = $excludes;

        return $this;
    }

    /**
     * Gets selected_by_default
     *
     * @return bool
     */
    public function getSelectedByDefault()
    {
        return $this->container['selected_by_default'];
    }

    /**
     * Sets selected_by_default
     *
     * @param bool $selected_by_default Gets or sets a value indicating whether service seleted by default or not.
     *
     * @return $this
     */
    public function setSelectedByDefault($selected_by_default)
    {
        $this->container['selected_by_default'] = $selected_by_default;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange] 
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange] 
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange] 
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange] 
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
