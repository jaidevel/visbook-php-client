<?php
/**
 * MethodBase
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * VisBook booking-API
 *
 * ## About localization/internationalization We currently support 6 languages: **Norwegian, English, Swedish, Danish, German, Russian**,  The fallback language is always **english**.  Translations are used for products and properties returned by the api, but the quality will depend on the hotel to have provided translations in the requested language.   Specify the language you want to use by using the [Accept-Language](https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Accept-Language) header.  ## About reservations  Once you make a reservation, you take up capacity at the hotel. Reservations must be kept alive every 40 seconds, else they expire to free up the capacity. When doing checkout (i.e when the user is sent to the payment processor), the expiration of the reservation is extended by 20 minutes. This means you do not need to ping the api while the user is \"away\" doing payment.   There is a **hard limit of 30 minutes before reservations are expired** no questions asked.**   This is to avoid someone holding capacity indefinitely.  ## About authorization Before a guest is able to do payment/checkout, the guest must have a valid cookie. This is obtained by doing the login/validation flow. The `/login` request sends the user a one-time-passord on the selected medium (email, sms). This code must be returned to us via the `/validation` endpoint within reasonable time. `/validation` will return a httpOnly cookie, which must be present when doing `/checkout`. This cookie must also be present if you want to use endpoints that relate to customer data, like `/orders` and `/user`.   `/validation` also returns customer data, *if the customer exists*, which can be used to \"pre-fill\" customer data for checkout.  ## About checkout #### Amount The client is responsible for calculating an `amount`, which is the amount the guest should pay. This serves as a security mechanism, to see that the client and server *agrees* on the amount, to make sure there hasn't been any \"mismatch\" between client and server.  #### PaymentType The client should make a call to `/checkout/paymentTypes` to see which payment types are available.  #### Terms The client should make a call to `/setup/terms` to present the terms to the user. Checkout is only possible if `acceptedTerms` is `true`.  #### Error/Success Upon success, the user will be forwarded to `successUrl`, with `orderGroup` as a query parameter. Example: https://reservations.visbook.com/5252/order?orderGroupId=1111111   You can then use orderGroupId to call `/ordergroups/{id}` to present an online order confirmation. Sms/Email order confirmation is handled by the api automatically.  Upon error, the user will be forwarded to `errorUrl` with the query parameter `errorCode`. Example: https://reservations.visbook.com/1047/checkout?errorCode=1  Where errorCode conforms to the following table:  | ErrorCode | Description | | --------- | ----------- |  | 1 | Unable to reserve the amount on the card. Contact card issuer. | | 2 | Unable to capture the amount on the card. Contact card issuer. | | 3 | Unable to query the payment provider about the transaction. Contact the hotel. | | 4 | Unable to annul (refund) the transaction. Contact the hotel. | | 6 | Unable to set order to status paid. Contact the hotel. | | 7 | Unknown response from the payment processor. Contact the hotel. | | 8 | Unable to find the order. Contact the hotel. | | 9 | The order has been modified by someone else. Contact the hotel. | | 10 | Unable to save the order. Accounting error due to amount being lower than required fixed amount on this account. Contact the hotel. | | 11 | Unable to save the order, there's an error with the price. Contact the hotel. | | 12 | Unable to save the order, the invoice customer was not found. Contact the hotel. | | 13 | Some reservations have expired. Try again. | | 14 | Unable to process sale. Contact card issuer. |  ## General flow  1. Create product reservations via `/reservations` endpoint 2. Keep reservations alive every 30-40 seconds via `/reservations/ping` (If you don't your reservations will expire) 3. Authorize guest via /login and /validation to receive a cookie you can use to checkout 4. Complete the order via /checkout. The guest _must_ be authorized before this step is possible.
 *
 * OpenAPI spec version: 8.38.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.36
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * MethodBase Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class MethodBase implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'MethodBase';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'member_type' => '\Swagger\Client\Model\MemberTypes',
'name' => 'string',
'declaring_type' => '\Swagger\Client\Model\Type',
'reflected_type' => '\Swagger\Client\Model\Type',
'module' => '\Swagger\Client\Model\Module',
'custom_attributes' => '\Swagger\Client\Model\CustomAttributeData[]',
'is_collectible' => 'bool',
'metadata_token' => 'int',
'attributes' => '\Swagger\Client\Model\MethodAttributes',
'method_implementation_flags' => '\Swagger\Client\Model\MethodImplAttributes',
'calling_convention' => '\Swagger\Client\Model\CallingConventions',
'is_abstract' => 'bool',
'is_constructor' => 'bool',
'is_final' => 'bool',
'is_hide_by_sig' => 'bool',
'is_special_name' => 'bool',
'is_static' => 'bool',
'is_virtual' => 'bool',
'is_assembly' => 'bool',
'is_family' => 'bool',
'is_family_and_assembly' => 'bool',
'is_family_or_assembly' => 'bool',
'is_private' => 'bool',
'is_public' => 'bool',
'is_constructed_generic_method' => 'bool',
'is_generic_method' => 'bool',
'is_generic_method_definition' => 'bool',
'contains_generic_parameters' => 'bool',
'method_handle' => '\Swagger\Client\Model\RuntimeMethodHandle',
'is_security_critical' => 'bool',
'is_security_safe_critical' => 'bool',
'is_security_transparent' => 'bool'    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'member_type' => null,
'name' => null,
'declaring_type' => null,
'reflected_type' => null,
'module' => null,
'custom_attributes' => null,
'is_collectible' => null,
'metadata_token' => 'int32',
'attributes' => null,
'method_implementation_flags' => null,
'calling_convention' => null,
'is_abstract' => null,
'is_constructor' => null,
'is_final' => null,
'is_hide_by_sig' => null,
'is_special_name' => null,
'is_static' => null,
'is_virtual' => null,
'is_assembly' => null,
'is_family' => null,
'is_family_and_assembly' => null,
'is_family_or_assembly' => null,
'is_private' => null,
'is_public' => null,
'is_constructed_generic_method' => null,
'is_generic_method' => null,
'is_generic_method_definition' => null,
'contains_generic_parameters' => null,
'method_handle' => null,
'is_security_critical' => null,
'is_security_safe_critical' => null,
'is_security_transparent' => null    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'member_type' => 'memberType',
'name' => 'name',
'declaring_type' => 'declaringType',
'reflected_type' => 'reflectedType',
'module' => 'module',
'custom_attributes' => 'customAttributes',
'is_collectible' => 'isCollectible',
'metadata_token' => 'metadataToken',
'attributes' => 'attributes',
'method_implementation_flags' => 'methodImplementationFlags',
'calling_convention' => 'callingConvention',
'is_abstract' => 'isAbstract',
'is_constructor' => 'isConstructor',
'is_final' => 'isFinal',
'is_hide_by_sig' => 'isHideBySig',
'is_special_name' => 'isSpecialName',
'is_static' => 'isStatic',
'is_virtual' => 'isVirtual',
'is_assembly' => 'isAssembly',
'is_family' => 'isFamily',
'is_family_and_assembly' => 'isFamilyAndAssembly',
'is_family_or_assembly' => 'isFamilyOrAssembly',
'is_private' => 'isPrivate',
'is_public' => 'isPublic',
'is_constructed_generic_method' => 'isConstructedGenericMethod',
'is_generic_method' => 'isGenericMethod',
'is_generic_method_definition' => 'isGenericMethodDefinition',
'contains_generic_parameters' => 'containsGenericParameters',
'method_handle' => 'methodHandle',
'is_security_critical' => 'isSecurityCritical',
'is_security_safe_critical' => 'isSecuritySafeCritical',
'is_security_transparent' => 'isSecurityTransparent'    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'member_type' => 'setMemberType',
'name' => 'setName',
'declaring_type' => 'setDeclaringType',
'reflected_type' => 'setReflectedType',
'module' => 'setModule',
'custom_attributes' => 'setCustomAttributes',
'is_collectible' => 'setIsCollectible',
'metadata_token' => 'setMetadataToken',
'attributes' => 'setAttributes',
'method_implementation_flags' => 'setMethodImplementationFlags',
'calling_convention' => 'setCallingConvention',
'is_abstract' => 'setIsAbstract',
'is_constructor' => 'setIsConstructor',
'is_final' => 'setIsFinal',
'is_hide_by_sig' => 'setIsHideBySig',
'is_special_name' => 'setIsSpecialName',
'is_static' => 'setIsStatic',
'is_virtual' => 'setIsVirtual',
'is_assembly' => 'setIsAssembly',
'is_family' => 'setIsFamily',
'is_family_and_assembly' => 'setIsFamilyAndAssembly',
'is_family_or_assembly' => 'setIsFamilyOrAssembly',
'is_private' => 'setIsPrivate',
'is_public' => 'setIsPublic',
'is_constructed_generic_method' => 'setIsConstructedGenericMethod',
'is_generic_method' => 'setIsGenericMethod',
'is_generic_method_definition' => 'setIsGenericMethodDefinition',
'contains_generic_parameters' => 'setContainsGenericParameters',
'method_handle' => 'setMethodHandle',
'is_security_critical' => 'setIsSecurityCritical',
'is_security_safe_critical' => 'setIsSecuritySafeCritical',
'is_security_transparent' => 'setIsSecurityTransparent'    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'member_type' => 'getMemberType',
'name' => 'getName',
'declaring_type' => 'getDeclaringType',
'reflected_type' => 'getReflectedType',
'module' => 'getModule',
'custom_attributes' => 'getCustomAttributes',
'is_collectible' => 'getIsCollectible',
'metadata_token' => 'getMetadataToken',
'attributes' => 'getAttributes',
'method_implementation_flags' => 'getMethodImplementationFlags',
'calling_convention' => 'getCallingConvention',
'is_abstract' => 'getIsAbstract',
'is_constructor' => 'getIsConstructor',
'is_final' => 'getIsFinal',
'is_hide_by_sig' => 'getIsHideBySig',
'is_special_name' => 'getIsSpecialName',
'is_static' => 'getIsStatic',
'is_virtual' => 'getIsVirtual',
'is_assembly' => 'getIsAssembly',
'is_family' => 'getIsFamily',
'is_family_and_assembly' => 'getIsFamilyAndAssembly',
'is_family_or_assembly' => 'getIsFamilyOrAssembly',
'is_private' => 'getIsPrivate',
'is_public' => 'getIsPublic',
'is_constructed_generic_method' => 'getIsConstructedGenericMethod',
'is_generic_method' => 'getIsGenericMethod',
'is_generic_method_definition' => 'getIsGenericMethodDefinition',
'contains_generic_parameters' => 'getContainsGenericParameters',
'method_handle' => 'getMethodHandle',
'is_security_critical' => 'getIsSecurityCritical',
'is_security_safe_critical' => 'getIsSecuritySafeCritical',
'is_security_transparent' => 'getIsSecurityTransparent'    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['member_type'] = isset($data['member_type']) ? $data['member_type'] : null;
        $this->container['name'] = isset($data['name']) ? $data['name'] : null;
        $this->container['declaring_type'] = isset($data['declaring_type']) ? $data['declaring_type'] : null;
        $this->container['reflected_type'] = isset($data['reflected_type']) ? $data['reflected_type'] : null;
        $this->container['module'] = isset($data['module']) ? $data['module'] : null;
        $this->container['custom_attributes'] = isset($data['custom_attributes']) ? $data['custom_attributes'] : null;
        $this->container['is_collectible'] = isset($data['is_collectible']) ? $data['is_collectible'] : null;
        $this->container['metadata_token'] = isset($data['metadata_token']) ? $data['metadata_token'] : null;
        $this->container['attributes'] = isset($data['attributes']) ? $data['attributes'] : null;
        $this->container['method_implementation_flags'] = isset($data['method_implementation_flags']) ? $data['method_implementation_flags'] : null;
        $this->container['calling_convention'] = isset($data['calling_convention']) ? $data['calling_convention'] : null;
        $this->container['is_abstract'] = isset($data['is_abstract']) ? $data['is_abstract'] : null;
        $this->container['is_constructor'] = isset($data['is_constructor']) ? $data['is_constructor'] : null;
        $this->container['is_final'] = isset($data['is_final']) ? $data['is_final'] : null;
        $this->container['is_hide_by_sig'] = isset($data['is_hide_by_sig']) ? $data['is_hide_by_sig'] : null;
        $this->container['is_special_name'] = isset($data['is_special_name']) ? $data['is_special_name'] : null;
        $this->container['is_static'] = isset($data['is_static']) ? $data['is_static'] : null;
        $this->container['is_virtual'] = isset($data['is_virtual']) ? $data['is_virtual'] : null;
        $this->container['is_assembly'] = isset($data['is_assembly']) ? $data['is_assembly'] : null;
        $this->container['is_family'] = isset($data['is_family']) ? $data['is_family'] : null;
        $this->container['is_family_and_assembly'] = isset($data['is_family_and_assembly']) ? $data['is_family_and_assembly'] : null;
        $this->container['is_family_or_assembly'] = isset($data['is_family_or_assembly']) ? $data['is_family_or_assembly'] : null;
        $this->container['is_private'] = isset($data['is_private']) ? $data['is_private'] : null;
        $this->container['is_public'] = isset($data['is_public']) ? $data['is_public'] : null;
        $this->container['is_constructed_generic_method'] = isset($data['is_constructed_generic_method']) ? $data['is_constructed_generic_method'] : null;
        $this->container['is_generic_method'] = isset($data['is_generic_method']) ? $data['is_generic_method'] : null;
        $this->container['is_generic_method_definition'] = isset($data['is_generic_method_definition']) ? $data['is_generic_method_definition'] : null;
        $this->container['contains_generic_parameters'] = isset($data['contains_generic_parameters']) ? $data['contains_generic_parameters'] : null;
        $this->container['method_handle'] = isset($data['method_handle']) ? $data['method_handle'] : null;
        $this->container['is_security_critical'] = isset($data['is_security_critical']) ? $data['is_security_critical'] : null;
        $this->container['is_security_safe_critical'] = isset($data['is_security_safe_critical']) ? $data['is_security_safe_critical'] : null;
        $this->container['is_security_transparent'] = isset($data['is_security_transparent']) ? $data['is_security_transparent'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets member_type
     *
     * @return \Swagger\Client\Model\MemberTypes
     */
    public function getMemberType()
    {
        return $this->container['member_type'];
    }

    /**
     * Sets member_type
     *
     * @param \Swagger\Client\Model\MemberTypes $member_type member_type
     *
     * @return $this
     */
    public function setMemberType($member_type)
    {
        $this->container['member_type'] = $member_type;

        return $this;
    }

    /**
     * Gets name
     *
     * @return string
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string $name name
     *
     * @return $this
     */
    public function setName($name)
    {
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets declaring_type
     *
     * @return \Swagger\Client\Model\Type
     */
    public function getDeclaringType()
    {
        return $this->container['declaring_type'];
    }

    /**
     * Sets declaring_type
     *
     * @param \Swagger\Client\Model\Type $declaring_type declaring_type
     *
     * @return $this
     */
    public function setDeclaringType($declaring_type)
    {
        $this->container['declaring_type'] = $declaring_type;

        return $this;
    }

    /**
     * Gets reflected_type
     *
     * @return \Swagger\Client\Model\Type
     */
    public function getReflectedType()
    {
        return $this->container['reflected_type'];
    }

    /**
     * Sets reflected_type
     *
     * @param \Swagger\Client\Model\Type $reflected_type reflected_type
     *
     * @return $this
     */
    public function setReflectedType($reflected_type)
    {
        $this->container['reflected_type'] = $reflected_type;

        return $this;
    }

    /**
     * Gets module
     *
     * @return \Swagger\Client\Model\Module
     */
    public function getModule()
    {
        return $this->container['module'];
    }

    /**
     * Sets module
     *
     * @param \Swagger\Client\Model\Module $module module
     *
     * @return $this
     */
    public function setModule($module)
    {
        $this->container['module'] = $module;

        return $this;
    }

    /**
     * Gets custom_attributes
     *
     * @return \Swagger\Client\Model\CustomAttributeData[]
     */
    public function getCustomAttributes()
    {
        return $this->container['custom_attributes'];
    }

    /**
     * Sets custom_attributes
     *
     * @param \Swagger\Client\Model\CustomAttributeData[] $custom_attributes custom_attributes
     *
     * @return $this
     */
    public function setCustomAttributes($custom_attributes)
    {
        $this->container['custom_attributes'] = $custom_attributes;

        return $this;
    }

    /**
     * Gets is_collectible
     *
     * @return bool
     */
    public function getIsCollectible()
    {
        return $this->container['is_collectible'];
    }

    /**
     * Sets is_collectible
     *
     * @param bool $is_collectible is_collectible
     *
     * @return $this
     */
    public function setIsCollectible($is_collectible)
    {
        $this->container['is_collectible'] = $is_collectible;

        return $this;
    }

    /**
     * Gets metadata_token
     *
     * @return int
     */
    public function getMetadataToken()
    {
        return $this->container['metadata_token'];
    }

    /**
     * Sets metadata_token
     *
     * @param int $metadata_token metadata_token
     *
     * @return $this
     */
    public function setMetadataToken($metadata_token)
    {
        $this->container['metadata_token'] = $metadata_token;

        return $this;
    }

    /**
     * Gets attributes
     *
     * @return \Swagger\Client\Model\MethodAttributes
     */
    public function getAttributes()
    {
        return $this->container['attributes'];
    }

    /**
     * Sets attributes
     *
     * @param \Swagger\Client\Model\MethodAttributes $attributes attributes
     *
     * @return $this
     */
    public function setAttributes($attributes)
    {
        $this->container['attributes'] = $attributes;

        return $this;
    }

    /**
     * Gets method_implementation_flags
     *
     * @return \Swagger\Client\Model\MethodImplAttributes
     */
    public function getMethodImplementationFlags()
    {
        return $this->container['method_implementation_flags'];
    }

    /**
     * Sets method_implementation_flags
     *
     * @param \Swagger\Client\Model\MethodImplAttributes $method_implementation_flags method_implementation_flags
     *
     * @return $this
     */
    public function setMethodImplementationFlags($method_implementation_flags)
    {
        $this->container['method_implementation_flags'] = $method_implementation_flags;

        return $this;
    }

    /**
     * Gets calling_convention
     *
     * @return \Swagger\Client\Model\CallingConventions
     */
    public function getCallingConvention()
    {
        return $this->container['calling_convention'];
    }

    /**
     * Sets calling_convention
     *
     * @param \Swagger\Client\Model\CallingConventions $calling_convention calling_convention
     *
     * @return $this
     */
    public function setCallingConvention($calling_convention)
    {
        $this->container['calling_convention'] = $calling_convention;

        return $this;
    }

    /**
     * Gets is_abstract
     *
     * @return bool
     */
    public function getIsAbstract()
    {
        return $this->container['is_abstract'];
    }

    /**
     * Sets is_abstract
     *
     * @param bool $is_abstract is_abstract
     *
     * @return $this
     */
    public function setIsAbstract($is_abstract)
    {
        $this->container['is_abstract'] = $is_abstract;

        return $this;
    }

    /**
     * Gets is_constructor
     *
     * @return bool
     */
    public function getIsConstructor()
    {
        return $this->container['is_constructor'];
    }

    /**
     * Sets is_constructor
     *
     * @param bool $is_constructor is_constructor
     *
     * @return $this
     */
    public function setIsConstructor($is_constructor)
    {
        $this->container['is_constructor'] = $is_constructor;

        return $this;
    }

    /**
     * Gets is_final
     *
     * @return bool
     */
    public function getIsFinal()
    {
        return $this->container['is_final'];
    }

    /**
     * Sets is_final
     *
     * @param bool $is_final is_final
     *
     * @return $this
     */
    public function setIsFinal($is_final)
    {
        $this->container['is_final'] = $is_final;

        return $this;
    }

    /**
     * Gets is_hide_by_sig
     *
     * @return bool
     */
    public function getIsHideBySig()
    {
        return $this->container['is_hide_by_sig'];
    }

    /**
     * Sets is_hide_by_sig
     *
     * @param bool $is_hide_by_sig is_hide_by_sig
     *
     * @return $this
     */
    public function setIsHideBySig($is_hide_by_sig)
    {
        $this->container['is_hide_by_sig'] = $is_hide_by_sig;

        return $this;
    }

    /**
     * Gets is_special_name
     *
     * @return bool
     */
    public function getIsSpecialName()
    {
        return $this->container['is_special_name'];
    }

    /**
     * Sets is_special_name
     *
     * @param bool $is_special_name is_special_name
     *
     * @return $this
     */
    public function setIsSpecialName($is_special_name)
    {
        $this->container['is_special_name'] = $is_special_name;

        return $this;
    }

    /**
     * Gets is_static
     *
     * @return bool
     */
    public function getIsStatic()
    {
        return $this->container['is_static'];
    }

    /**
     * Sets is_static
     *
     * @param bool $is_static is_static
     *
     * @return $this
     */
    public function setIsStatic($is_static)
    {
        $this->container['is_static'] = $is_static;

        return $this;
    }

    /**
     * Gets is_virtual
     *
     * @return bool
     */
    public function getIsVirtual()
    {
        return $this->container['is_virtual'];
    }

    /**
     * Sets is_virtual
     *
     * @param bool $is_virtual is_virtual
     *
     * @return $this
     */
    public function setIsVirtual($is_virtual)
    {
        $this->container['is_virtual'] = $is_virtual;

        return $this;
    }

    /**
     * Gets is_assembly
     *
     * @return bool
     */
    public function getIsAssembly()
    {
        return $this->container['is_assembly'];
    }

    /**
     * Sets is_assembly
     *
     * @param bool $is_assembly is_assembly
     *
     * @return $this
     */
    public function setIsAssembly($is_assembly)
    {
        $this->container['is_assembly'] = $is_assembly;

        return $this;
    }

    /**
     * Gets is_family
     *
     * @return bool
     */
    public function getIsFamily()
    {
        return $this->container['is_family'];
    }

    /**
     * Sets is_family
     *
     * @param bool $is_family is_family
     *
     * @return $this
     */
    public function setIsFamily($is_family)
    {
        $this->container['is_family'] = $is_family;

        return $this;
    }

    /**
     * Gets is_family_and_assembly
     *
     * @return bool
     */
    public function getIsFamilyAndAssembly()
    {
        return $this->container['is_family_and_assembly'];
    }

    /**
     * Sets is_family_and_assembly
     *
     * @param bool $is_family_and_assembly is_family_and_assembly
     *
     * @return $this
     */
    public function setIsFamilyAndAssembly($is_family_and_assembly)
    {
        $this->container['is_family_and_assembly'] = $is_family_and_assembly;

        return $this;
    }

    /**
     * Gets is_family_or_assembly
     *
     * @return bool
     */
    public function getIsFamilyOrAssembly()
    {
        return $this->container['is_family_or_assembly'];
    }

    /**
     * Sets is_family_or_assembly
     *
     * @param bool $is_family_or_assembly is_family_or_assembly
     *
     * @return $this
     */
    public function setIsFamilyOrAssembly($is_family_or_assembly)
    {
        $this->container['is_family_or_assembly'] = $is_family_or_assembly;

        return $this;
    }

    /**
     * Gets is_private
     *
     * @return bool
     */
    public function getIsPrivate()
    {
        return $this->container['is_private'];
    }

    /**
     * Sets is_private
     *
     * @param bool $is_private is_private
     *
     * @return $this
     */
    public function setIsPrivate($is_private)
    {
        $this->container['is_private'] = $is_private;

        return $this;
    }

    /**
     * Gets is_public
     *
     * @return bool
     */
    public function getIsPublic()
    {
        return $this->container['is_public'];
    }

    /**
     * Sets is_public
     *
     * @param bool $is_public is_public
     *
     * @return $this
     */
    public function setIsPublic($is_public)
    {
        $this->container['is_public'] = $is_public;

        return $this;
    }

    /**
     * Gets is_constructed_generic_method
     *
     * @return bool
     */
    public function getIsConstructedGenericMethod()
    {
        return $this->container['is_constructed_generic_method'];
    }

    /**
     * Sets is_constructed_generic_method
     *
     * @param bool $is_constructed_generic_method is_constructed_generic_method
     *
     * @return $this
     */
    public function setIsConstructedGenericMethod($is_constructed_generic_method)
    {
        $this->container['is_constructed_generic_method'] = $is_constructed_generic_method;

        return $this;
    }

    /**
     * Gets is_generic_method
     *
     * @return bool
     */
    public function getIsGenericMethod()
    {
        return $this->container['is_generic_method'];
    }

    /**
     * Sets is_generic_method
     *
     * @param bool $is_generic_method is_generic_method
     *
     * @return $this
     */
    public function setIsGenericMethod($is_generic_method)
    {
        $this->container['is_generic_method'] = $is_generic_method;

        return $this;
    }

    /**
     * Gets is_generic_method_definition
     *
     * @return bool
     */
    public function getIsGenericMethodDefinition()
    {
        return $this->container['is_generic_method_definition'];
    }

    /**
     * Sets is_generic_method_definition
     *
     * @param bool $is_generic_method_definition is_generic_method_definition
     *
     * @return $this
     */
    public function setIsGenericMethodDefinition($is_generic_method_definition)
    {
        $this->container['is_generic_method_definition'] = $is_generic_method_definition;

        return $this;
    }

    /**
     * Gets contains_generic_parameters
     *
     * @return bool
     */
    public function getContainsGenericParameters()
    {
        return $this->container['contains_generic_parameters'];
    }

    /**
     * Sets contains_generic_parameters
     *
     * @param bool $contains_generic_parameters contains_generic_parameters
     *
     * @return $this
     */
    public function setContainsGenericParameters($contains_generic_parameters)
    {
        $this->container['contains_generic_parameters'] = $contains_generic_parameters;

        return $this;
    }

    /**
     * Gets method_handle
     *
     * @return \Swagger\Client\Model\RuntimeMethodHandle
     */
    public function getMethodHandle()
    {
        return $this->container['method_handle'];
    }

    /**
     * Sets method_handle
     *
     * @param \Swagger\Client\Model\RuntimeMethodHandle $method_handle method_handle
     *
     * @return $this
     */
    public function setMethodHandle($method_handle)
    {
        $this->container['method_handle'] = $method_handle;

        return $this;
    }

    /**
     * Gets is_security_critical
     *
     * @return bool
     */
    public function getIsSecurityCritical()
    {
        return $this->container['is_security_critical'];
    }

    /**
     * Sets is_security_critical
     *
     * @param bool $is_security_critical is_security_critical
     *
     * @return $this
     */
    public function setIsSecurityCritical($is_security_critical)
    {
        $this->container['is_security_critical'] = $is_security_critical;

        return $this;
    }

    /**
     * Gets is_security_safe_critical
     *
     * @return bool
     */
    public function getIsSecuritySafeCritical()
    {
        return $this->container['is_security_safe_critical'];
    }

    /**
     * Sets is_security_safe_critical
     *
     * @param bool $is_security_safe_critical is_security_safe_critical
     *
     * @return $this
     */
    public function setIsSecuritySafeCritical($is_security_safe_critical)
    {
        $this->container['is_security_safe_critical'] = $is_security_safe_critical;

        return $this;
    }

    /**
     * Gets is_security_transparent
     *
     * @return bool
     */
    public function getIsSecurityTransparent()
    {
        return $this->container['is_security_transparent'];
    }

    /**
     * Sets is_security_transparent
     *
     * @param bool $is_security_transparent is_security_transparent
     *
     * @return $this
     */
    public function setIsSecurityTransparent($is_security_transparent)
    {
        $this->container['is_security_transparent'] = $is_security_transparent;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange] 
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange] 
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange] 
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange] 
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
