<?php
/**
 * Type
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * VisBook booking-API
 *
 * ## About localization/internationalization We currently support 6 languages: **Norwegian, English, Swedish, Danish, German, Russian**,  The fallback language is always **english**.  Translations are used for products and properties returned by the api, but the quality will depend on the hotel to have provided translations in the requested language.   Specify the language you want to use by using the [Accept-Language](https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Accept-Language) header.  ## About reservations  Once you make a reservation, you take up capacity at the hotel. Reservations must be kept alive every 40 seconds, else they expire to free up the capacity. When doing checkout (i.e when the user is sent to the payment processor), the expiration of the reservation is extended by 20 minutes. This means you do not need to ping the api while the user is \"away\" doing payment.   There is a **hard limit of 30 minutes before reservations are expired** no questions asked.**   This is to avoid someone holding capacity indefinitely.  ## About authorization Before a guest is able to do payment/checkout, the guest must have a valid cookie. This is obtained by doing the login/validation flow. The `/login` request sends the user a one-time-passord on the selected medium (email, sms). This code must be returned to us via the `/validation` endpoint within reasonable time. `/validation` will return a httpOnly cookie, which must be present when doing `/checkout`. This cookie must also be present if you want to use endpoints that relate to customer data, like `/orders` and `/user`.   `/validation` also returns customer data, *if the customer exists*, which can be used to \"pre-fill\" customer data for checkout.  ## About checkout #### Amount The client is responsible for calculating an `amount`, which is the amount the guest should pay. This serves as a security mechanism, to see that the client and server *agrees* on the amount, to make sure there hasn't been any \"mismatch\" between client and server.  #### PaymentType The client should make a call to `/checkout/paymentTypes` to see which payment types are available.  #### Terms The client should make a call to `/setup/terms` to present the terms to the user. Checkout is only possible if `acceptedTerms` is `true`.  #### Error/Success Upon success, the user will be forwarded to `successUrl`, with `orderGroup` as a query parameter. Example: https://reservations.visbook.com/5252/order?orderGroupId=1111111   You can then use orderGroupId to call `/ordergroups/{id}` to present an online order confirmation. Sms/Email order confirmation is handled by the api automatically.  Upon error, the user will be forwarded to `errorUrl` with the query parameter `errorCode`. Example: https://reservations.visbook.com/1047/checkout?errorCode=1  Where errorCode conforms to the following table:  | ErrorCode | Description | | --------- | ----------- |  | 1 | Unable to reserve the amount on the card. Contact card issuer. | | 2 | Unable to capture the amount on the card. Contact card issuer. | | 3 | Unable to query the payment provider about the transaction. Contact the hotel. | | 4 | Unable to annul (refund) the transaction. Contact the hotel. | | 6 | Unable to set order to status paid. Contact the hotel. | | 7 | Unknown response from the payment processor. Contact the hotel. | | 8 | Unable to find the order. Contact the hotel. | | 9 | The order has been modified by someone else. Contact the hotel. | | 10 | Unable to save the order. Accounting error due to amount being lower than required fixed amount on this account. Contact the hotel. | | 11 | Unable to save the order, there's an error with the price. Contact the hotel. | | 12 | Unable to save the order, the invoice customer was not found. Contact the hotel. | | 13 | Some reservations have expired. Try again. | | 14 | Unable to process sale. Contact card issuer. |  ## General flow  1. Create product reservations via `/reservations` endpoint 2. Keep reservations alive every 30-40 seconds via `/reservations/ping` (If you don't your reservations will expire) 3. Authorize guest via /login and /validation to receive a cookie you can use to checkout 4. Complete the order via /checkout. The guest _must_ be authorized before this step is possible.
 *
 * OpenAPI spec version: 8.38.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.36
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * Type Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class Type implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'Type';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'name' => 'string',
'custom_attributes' => '\Swagger\Client\Model\CustomAttributeData[]',
'is_collectible' => 'bool',
'metadata_token' => 'int',
'type_handle' => '\Swagger\Client\Model\RuntimeTypeHandle',
'is_interface' => 'bool',
'member_type' => '\Swagger\Client\Model\MemberTypes',
'namespace' => 'string',
'assembly_qualified_name' => 'string',
'full_name' => 'string',
'assembly' => '\Swagger\Client\Model\Assembly',
'module' => '\Swagger\Client\Model\Module',
'is_nested' => 'bool',
'declaring_type' => '\Swagger\Client\Model\Type',
'declaring_method' => '\Swagger\Client\Model\MethodBase',
'reflected_type' => '\Swagger\Client\Model\Type',
'underlying_system_type' => '\Swagger\Client\Model\Type',
'is_type_definition' => 'bool',
'is_array' => 'bool',
'is_by_ref' => 'bool',
'is_pointer' => 'bool',
'is_constructed_generic_type' => 'bool',
'is_generic_parameter' => 'bool',
'is_generic_type_parameter' => 'bool',
'is_generic_method_parameter' => 'bool',
'is_generic_type' => 'bool',
'is_generic_type_definition' => 'bool',
'is_sz_array' => 'bool',
'is_variable_bound_array' => 'bool',
'is_by_ref_like' => 'bool',
'has_element_type' => 'bool',
'generic_type_arguments' => '\Swagger\Client\Model\Type[]',
'generic_parameter_position' => 'int',
'generic_parameter_attributes' => '\Swagger\Client\Model\GenericParameterAttributes',
'attributes' => '\Swagger\Client\Model\TypeAttributes',
'is_abstract' => 'bool',
'is_import' => 'bool',
'is_sealed' => 'bool',
'is_special_name' => 'bool',
'is_class' => 'bool',
'is_nested_assembly' => 'bool',
'is_nested_fam_and_assem' => 'bool',
'is_nested_family' => 'bool',
'is_nested_fam_or_assem' => 'bool',
'is_nested_private' => 'bool',
'is_nested_public' => 'bool',
'is_not_public' => 'bool',
'is_public' => 'bool',
'is_auto_layout' => 'bool',
'is_explicit_layout' => 'bool',
'is_layout_sequential' => 'bool',
'is_ansi_class' => 'bool',
'is_auto_class' => 'bool',
'is_unicode_class' => 'bool',
'is_com_object' => 'bool',
'is_contextful' => 'bool',
'is_enum' => 'bool',
'is_marshal_by_ref' => 'bool',
'is_primitive' => 'bool',
'is_value_type' => 'bool',
'is_signature_type' => 'bool',
'is_security_critical' => 'bool',
'is_security_safe_critical' => 'bool',
'is_security_transparent' => 'bool',
'struct_layout_attribute' => '\Swagger\Client\Model\StructLayoutAttribute',
'type_initializer' => '\Swagger\Client\Model\ConstructorInfo',
'g_uid' => 'string',
'base_type' => '\Swagger\Client\Model\Type',
'is_serializable' => 'bool',
'contains_generic_parameters' => 'bool',
'is_visible' => 'bool'    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'name' => null,
'custom_attributes' => null,
'is_collectible' => null,
'metadata_token' => 'int32',
'type_handle' => null,
'is_interface' => null,
'member_type' => null,
'namespace' => null,
'assembly_qualified_name' => null,
'full_name' => null,
'assembly' => null,
'module' => null,
'is_nested' => null,
'declaring_type' => null,
'declaring_method' => null,
'reflected_type' => null,
'underlying_system_type' => null,
'is_type_definition' => null,
'is_array' => null,
'is_by_ref' => null,
'is_pointer' => null,
'is_constructed_generic_type' => null,
'is_generic_parameter' => null,
'is_generic_type_parameter' => null,
'is_generic_method_parameter' => null,
'is_generic_type' => null,
'is_generic_type_definition' => null,
'is_sz_array' => null,
'is_variable_bound_array' => null,
'is_by_ref_like' => null,
'has_element_type' => null,
'generic_type_arguments' => null,
'generic_parameter_position' => 'int32',
'generic_parameter_attributes' => null,
'attributes' => null,
'is_abstract' => null,
'is_import' => null,
'is_sealed' => null,
'is_special_name' => null,
'is_class' => null,
'is_nested_assembly' => null,
'is_nested_fam_and_assem' => null,
'is_nested_family' => null,
'is_nested_fam_or_assem' => null,
'is_nested_private' => null,
'is_nested_public' => null,
'is_not_public' => null,
'is_public' => null,
'is_auto_layout' => null,
'is_explicit_layout' => null,
'is_layout_sequential' => null,
'is_ansi_class' => null,
'is_auto_class' => null,
'is_unicode_class' => null,
'is_com_object' => null,
'is_contextful' => null,
'is_enum' => null,
'is_marshal_by_ref' => null,
'is_primitive' => null,
'is_value_type' => null,
'is_signature_type' => null,
'is_security_critical' => null,
'is_security_safe_critical' => null,
'is_security_transparent' => null,
'struct_layout_attribute' => null,
'type_initializer' => null,
'g_uid' => 'uuid',
'base_type' => null,
'is_serializable' => null,
'contains_generic_parameters' => null,
'is_visible' => null    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'name' => 'name',
'custom_attributes' => 'customAttributes',
'is_collectible' => 'isCollectible',
'metadata_token' => 'metadataToken',
'type_handle' => 'typeHandle',
'is_interface' => 'isInterface',
'member_type' => 'memberType',
'namespace' => 'namespace',
'assembly_qualified_name' => 'assemblyQualifiedName',
'full_name' => 'fullName',
'assembly' => 'assembly',
'module' => 'module',
'is_nested' => 'isNested',
'declaring_type' => 'declaringType',
'declaring_method' => 'declaringMethod',
'reflected_type' => 'reflectedType',
'underlying_system_type' => 'underlyingSystemType',
'is_type_definition' => 'isTypeDefinition',
'is_array' => 'isArray',
'is_by_ref' => 'isByRef',
'is_pointer' => 'isPointer',
'is_constructed_generic_type' => 'isConstructedGenericType',
'is_generic_parameter' => 'isGenericParameter',
'is_generic_type_parameter' => 'isGenericTypeParameter',
'is_generic_method_parameter' => 'isGenericMethodParameter',
'is_generic_type' => 'isGenericType',
'is_generic_type_definition' => 'isGenericTypeDefinition',
'is_sz_array' => 'isSZArray',
'is_variable_bound_array' => 'isVariableBoundArray',
'is_by_ref_like' => 'isByRefLike',
'has_element_type' => 'hasElementType',
'generic_type_arguments' => 'genericTypeArguments',
'generic_parameter_position' => 'genericParameterPosition',
'generic_parameter_attributes' => 'genericParameterAttributes',
'attributes' => 'attributes',
'is_abstract' => 'isAbstract',
'is_import' => 'isImport',
'is_sealed' => 'isSealed',
'is_special_name' => 'isSpecialName',
'is_class' => 'isClass',
'is_nested_assembly' => 'isNestedAssembly',
'is_nested_fam_and_assem' => 'isNestedFamANDAssem',
'is_nested_family' => 'isNestedFamily',
'is_nested_fam_or_assem' => 'isNestedFamORAssem',
'is_nested_private' => 'isNestedPrivate',
'is_nested_public' => 'isNestedPublic',
'is_not_public' => 'isNotPublic',
'is_public' => 'isPublic',
'is_auto_layout' => 'isAutoLayout',
'is_explicit_layout' => 'isExplicitLayout',
'is_layout_sequential' => 'isLayoutSequential',
'is_ansi_class' => 'isAnsiClass',
'is_auto_class' => 'isAutoClass',
'is_unicode_class' => 'isUnicodeClass',
'is_com_object' => 'isCOMObject',
'is_contextful' => 'isContextful',
'is_enum' => 'isEnum',
'is_marshal_by_ref' => 'isMarshalByRef',
'is_primitive' => 'isPrimitive',
'is_value_type' => 'isValueType',
'is_signature_type' => 'isSignatureType',
'is_security_critical' => 'isSecurityCritical',
'is_security_safe_critical' => 'isSecuritySafeCritical',
'is_security_transparent' => 'isSecurityTransparent',
'struct_layout_attribute' => 'structLayoutAttribute',
'type_initializer' => 'typeInitializer',
'g_uid' => 'gUID',
'base_type' => 'baseType',
'is_serializable' => 'isSerializable',
'contains_generic_parameters' => 'containsGenericParameters',
'is_visible' => 'isVisible'    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'name' => 'setName',
'custom_attributes' => 'setCustomAttributes',
'is_collectible' => 'setIsCollectible',
'metadata_token' => 'setMetadataToken',
'type_handle' => 'setTypeHandle',
'is_interface' => 'setIsInterface',
'member_type' => 'setMemberType',
'namespace' => 'setNamespace',
'assembly_qualified_name' => 'setAssemblyQualifiedName',
'full_name' => 'setFullName',
'assembly' => 'setAssembly',
'module' => 'setModule',
'is_nested' => 'setIsNested',
'declaring_type' => 'setDeclaringType',
'declaring_method' => 'setDeclaringMethod',
'reflected_type' => 'setReflectedType',
'underlying_system_type' => 'setUnderlyingSystemType',
'is_type_definition' => 'setIsTypeDefinition',
'is_array' => 'setIsArray',
'is_by_ref' => 'setIsByRef',
'is_pointer' => 'setIsPointer',
'is_constructed_generic_type' => 'setIsConstructedGenericType',
'is_generic_parameter' => 'setIsGenericParameter',
'is_generic_type_parameter' => 'setIsGenericTypeParameter',
'is_generic_method_parameter' => 'setIsGenericMethodParameter',
'is_generic_type' => 'setIsGenericType',
'is_generic_type_definition' => 'setIsGenericTypeDefinition',
'is_sz_array' => 'setIsSzArray',
'is_variable_bound_array' => 'setIsVariableBoundArray',
'is_by_ref_like' => 'setIsByRefLike',
'has_element_type' => 'setHasElementType',
'generic_type_arguments' => 'setGenericTypeArguments',
'generic_parameter_position' => 'setGenericParameterPosition',
'generic_parameter_attributes' => 'setGenericParameterAttributes',
'attributes' => 'setAttributes',
'is_abstract' => 'setIsAbstract',
'is_import' => 'setIsImport',
'is_sealed' => 'setIsSealed',
'is_special_name' => 'setIsSpecialName',
'is_class' => 'setIsClass',
'is_nested_assembly' => 'setIsNestedAssembly',
'is_nested_fam_and_assem' => 'setIsNestedFamAndAssem',
'is_nested_family' => 'setIsNestedFamily',
'is_nested_fam_or_assem' => 'setIsNestedFamOrAssem',
'is_nested_private' => 'setIsNestedPrivate',
'is_nested_public' => 'setIsNestedPublic',
'is_not_public' => 'setIsNotPublic',
'is_public' => 'setIsPublic',
'is_auto_layout' => 'setIsAutoLayout',
'is_explicit_layout' => 'setIsExplicitLayout',
'is_layout_sequential' => 'setIsLayoutSequential',
'is_ansi_class' => 'setIsAnsiClass',
'is_auto_class' => 'setIsAutoClass',
'is_unicode_class' => 'setIsUnicodeClass',
'is_com_object' => 'setIsComObject',
'is_contextful' => 'setIsContextful',
'is_enum' => 'setIsEnum',
'is_marshal_by_ref' => 'setIsMarshalByRef',
'is_primitive' => 'setIsPrimitive',
'is_value_type' => 'setIsValueType',
'is_signature_type' => 'setIsSignatureType',
'is_security_critical' => 'setIsSecurityCritical',
'is_security_safe_critical' => 'setIsSecuritySafeCritical',
'is_security_transparent' => 'setIsSecurityTransparent',
'struct_layout_attribute' => 'setStructLayoutAttribute',
'type_initializer' => 'setTypeInitializer',
'g_uid' => 'setGUid',
'base_type' => 'setBaseType',
'is_serializable' => 'setIsSerializable',
'contains_generic_parameters' => 'setContainsGenericParameters',
'is_visible' => 'setIsVisible'    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'name' => 'getName',
'custom_attributes' => 'getCustomAttributes',
'is_collectible' => 'getIsCollectible',
'metadata_token' => 'getMetadataToken',
'type_handle' => 'getTypeHandle',
'is_interface' => 'getIsInterface',
'member_type' => 'getMemberType',
'namespace' => 'getNamespace',
'assembly_qualified_name' => 'getAssemblyQualifiedName',
'full_name' => 'getFullName',
'assembly' => 'getAssembly',
'module' => 'getModule',
'is_nested' => 'getIsNested',
'declaring_type' => 'getDeclaringType',
'declaring_method' => 'getDeclaringMethod',
'reflected_type' => 'getReflectedType',
'underlying_system_type' => 'getUnderlyingSystemType',
'is_type_definition' => 'getIsTypeDefinition',
'is_array' => 'getIsArray',
'is_by_ref' => 'getIsByRef',
'is_pointer' => 'getIsPointer',
'is_constructed_generic_type' => 'getIsConstructedGenericType',
'is_generic_parameter' => 'getIsGenericParameter',
'is_generic_type_parameter' => 'getIsGenericTypeParameter',
'is_generic_method_parameter' => 'getIsGenericMethodParameter',
'is_generic_type' => 'getIsGenericType',
'is_generic_type_definition' => 'getIsGenericTypeDefinition',
'is_sz_array' => 'getIsSzArray',
'is_variable_bound_array' => 'getIsVariableBoundArray',
'is_by_ref_like' => 'getIsByRefLike',
'has_element_type' => 'getHasElementType',
'generic_type_arguments' => 'getGenericTypeArguments',
'generic_parameter_position' => 'getGenericParameterPosition',
'generic_parameter_attributes' => 'getGenericParameterAttributes',
'attributes' => 'getAttributes',
'is_abstract' => 'getIsAbstract',
'is_import' => 'getIsImport',
'is_sealed' => 'getIsSealed',
'is_special_name' => 'getIsSpecialName',
'is_class' => 'getIsClass',
'is_nested_assembly' => 'getIsNestedAssembly',
'is_nested_fam_and_assem' => 'getIsNestedFamAndAssem',
'is_nested_family' => 'getIsNestedFamily',
'is_nested_fam_or_assem' => 'getIsNestedFamOrAssem',
'is_nested_private' => 'getIsNestedPrivate',
'is_nested_public' => 'getIsNestedPublic',
'is_not_public' => 'getIsNotPublic',
'is_public' => 'getIsPublic',
'is_auto_layout' => 'getIsAutoLayout',
'is_explicit_layout' => 'getIsExplicitLayout',
'is_layout_sequential' => 'getIsLayoutSequential',
'is_ansi_class' => 'getIsAnsiClass',
'is_auto_class' => 'getIsAutoClass',
'is_unicode_class' => 'getIsUnicodeClass',
'is_com_object' => 'getIsComObject',
'is_contextful' => 'getIsContextful',
'is_enum' => 'getIsEnum',
'is_marshal_by_ref' => 'getIsMarshalByRef',
'is_primitive' => 'getIsPrimitive',
'is_value_type' => 'getIsValueType',
'is_signature_type' => 'getIsSignatureType',
'is_security_critical' => 'getIsSecurityCritical',
'is_security_safe_critical' => 'getIsSecuritySafeCritical',
'is_security_transparent' => 'getIsSecurityTransparent',
'struct_layout_attribute' => 'getStructLayoutAttribute',
'type_initializer' => 'getTypeInitializer',
'g_uid' => 'getGUid',
'base_type' => 'getBaseType',
'is_serializable' => 'getIsSerializable',
'contains_generic_parameters' => 'getContainsGenericParameters',
'is_visible' => 'getIsVisible'    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['name'] = isset($data['name']) ? $data['name'] : null;
        $this->container['custom_attributes'] = isset($data['custom_attributes']) ? $data['custom_attributes'] : null;
        $this->container['is_collectible'] = isset($data['is_collectible']) ? $data['is_collectible'] : null;
        $this->container['metadata_token'] = isset($data['metadata_token']) ? $data['metadata_token'] : null;
        $this->container['type_handle'] = isset($data['type_handle']) ? $data['type_handle'] : null;
        $this->container['is_interface'] = isset($data['is_interface']) ? $data['is_interface'] : null;
        $this->container['member_type'] = isset($data['member_type']) ? $data['member_type'] : null;
        $this->container['namespace'] = isset($data['namespace']) ? $data['namespace'] : null;
        $this->container['assembly_qualified_name'] = isset($data['assembly_qualified_name']) ? $data['assembly_qualified_name'] : null;
        $this->container['full_name'] = isset($data['full_name']) ? $data['full_name'] : null;
        $this->container['assembly'] = isset($data['assembly']) ? $data['assembly'] : null;
        $this->container['module'] = isset($data['module']) ? $data['module'] : null;
        $this->container['is_nested'] = isset($data['is_nested']) ? $data['is_nested'] : null;
        $this->container['declaring_type'] = isset($data['declaring_type']) ? $data['declaring_type'] : null;
        $this->container['declaring_method'] = isset($data['declaring_method']) ? $data['declaring_method'] : null;
        $this->container['reflected_type'] = isset($data['reflected_type']) ? $data['reflected_type'] : null;
        $this->container['underlying_system_type'] = isset($data['underlying_system_type']) ? $data['underlying_system_type'] : null;
        $this->container['is_type_definition'] = isset($data['is_type_definition']) ? $data['is_type_definition'] : null;
        $this->container['is_array'] = isset($data['is_array']) ? $data['is_array'] : null;
        $this->container['is_by_ref'] = isset($data['is_by_ref']) ? $data['is_by_ref'] : null;
        $this->container['is_pointer'] = isset($data['is_pointer']) ? $data['is_pointer'] : null;
        $this->container['is_constructed_generic_type'] = isset($data['is_constructed_generic_type']) ? $data['is_constructed_generic_type'] : null;
        $this->container['is_generic_parameter'] = isset($data['is_generic_parameter']) ? $data['is_generic_parameter'] : null;
        $this->container['is_generic_type_parameter'] = isset($data['is_generic_type_parameter']) ? $data['is_generic_type_parameter'] : null;
        $this->container['is_generic_method_parameter'] = isset($data['is_generic_method_parameter']) ? $data['is_generic_method_parameter'] : null;
        $this->container['is_generic_type'] = isset($data['is_generic_type']) ? $data['is_generic_type'] : null;
        $this->container['is_generic_type_definition'] = isset($data['is_generic_type_definition']) ? $data['is_generic_type_definition'] : null;
        $this->container['is_sz_array'] = isset($data['is_sz_array']) ? $data['is_sz_array'] : null;
        $this->container['is_variable_bound_array'] = isset($data['is_variable_bound_array']) ? $data['is_variable_bound_array'] : null;
        $this->container['is_by_ref_like'] = isset($data['is_by_ref_like']) ? $data['is_by_ref_like'] : null;
        $this->container['has_element_type'] = isset($data['has_element_type']) ? $data['has_element_type'] : null;
        $this->container['generic_type_arguments'] = isset($data['generic_type_arguments']) ? $data['generic_type_arguments'] : null;
        $this->container['generic_parameter_position'] = isset($data['generic_parameter_position']) ? $data['generic_parameter_position'] : null;
        $this->container['generic_parameter_attributes'] = isset($data['generic_parameter_attributes']) ? $data['generic_parameter_attributes'] : null;
        $this->container['attributes'] = isset($data['attributes']) ? $data['attributes'] : null;
        $this->container['is_abstract'] = isset($data['is_abstract']) ? $data['is_abstract'] : null;
        $this->container['is_import'] = isset($data['is_import']) ? $data['is_import'] : null;
        $this->container['is_sealed'] = isset($data['is_sealed']) ? $data['is_sealed'] : null;
        $this->container['is_special_name'] = isset($data['is_special_name']) ? $data['is_special_name'] : null;
        $this->container['is_class'] = isset($data['is_class']) ? $data['is_class'] : null;
        $this->container['is_nested_assembly'] = isset($data['is_nested_assembly']) ? $data['is_nested_assembly'] : null;
        $this->container['is_nested_fam_and_assem'] = isset($data['is_nested_fam_and_assem']) ? $data['is_nested_fam_and_assem'] : null;
        $this->container['is_nested_family'] = isset($data['is_nested_family']) ? $data['is_nested_family'] : null;
        $this->container['is_nested_fam_or_assem'] = isset($data['is_nested_fam_or_assem']) ? $data['is_nested_fam_or_assem'] : null;
        $this->container['is_nested_private'] = isset($data['is_nested_private']) ? $data['is_nested_private'] : null;
        $this->container['is_nested_public'] = isset($data['is_nested_public']) ? $data['is_nested_public'] : null;
        $this->container['is_not_public'] = isset($data['is_not_public']) ? $data['is_not_public'] : null;
        $this->container['is_public'] = isset($data['is_public']) ? $data['is_public'] : null;
        $this->container['is_auto_layout'] = isset($data['is_auto_layout']) ? $data['is_auto_layout'] : null;
        $this->container['is_explicit_layout'] = isset($data['is_explicit_layout']) ? $data['is_explicit_layout'] : null;
        $this->container['is_layout_sequential'] = isset($data['is_layout_sequential']) ? $data['is_layout_sequential'] : null;
        $this->container['is_ansi_class'] = isset($data['is_ansi_class']) ? $data['is_ansi_class'] : null;
        $this->container['is_auto_class'] = isset($data['is_auto_class']) ? $data['is_auto_class'] : null;
        $this->container['is_unicode_class'] = isset($data['is_unicode_class']) ? $data['is_unicode_class'] : null;
        $this->container['is_com_object'] = isset($data['is_com_object']) ? $data['is_com_object'] : null;
        $this->container['is_contextful'] = isset($data['is_contextful']) ? $data['is_contextful'] : null;
        $this->container['is_enum'] = isset($data['is_enum']) ? $data['is_enum'] : null;
        $this->container['is_marshal_by_ref'] = isset($data['is_marshal_by_ref']) ? $data['is_marshal_by_ref'] : null;
        $this->container['is_primitive'] = isset($data['is_primitive']) ? $data['is_primitive'] : null;
        $this->container['is_value_type'] = isset($data['is_value_type']) ? $data['is_value_type'] : null;
        $this->container['is_signature_type'] = isset($data['is_signature_type']) ? $data['is_signature_type'] : null;
        $this->container['is_security_critical'] = isset($data['is_security_critical']) ? $data['is_security_critical'] : null;
        $this->container['is_security_safe_critical'] = isset($data['is_security_safe_critical']) ? $data['is_security_safe_critical'] : null;
        $this->container['is_security_transparent'] = isset($data['is_security_transparent']) ? $data['is_security_transparent'] : null;
        $this->container['struct_layout_attribute'] = isset($data['struct_layout_attribute']) ? $data['struct_layout_attribute'] : null;
        $this->container['type_initializer'] = isset($data['type_initializer']) ? $data['type_initializer'] : null;
        $this->container['g_uid'] = isset($data['g_uid']) ? $data['g_uid'] : null;
        $this->container['base_type'] = isset($data['base_type']) ? $data['base_type'] : null;
        $this->container['is_serializable'] = isset($data['is_serializable']) ? $data['is_serializable'] : null;
        $this->container['contains_generic_parameters'] = isset($data['contains_generic_parameters']) ? $data['contains_generic_parameters'] : null;
        $this->container['is_visible'] = isset($data['is_visible']) ? $data['is_visible'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets name
     *
     * @return string
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string $name name
     *
     * @return $this
     */
    public function setName($name)
    {
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets custom_attributes
     *
     * @return \Swagger\Client\Model\CustomAttributeData[]
     */
    public function getCustomAttributes()
    {
        return $this->container['custom_attributes'];
    }

    /**
     * Sets custom_attributes
     *
     * @param \Swagger\Client\Model\CustomAttributeData[] $custom_attributes custom_attributes
     *
     * @return $this
     */
    public function setCustomAttributes($custom_attributes)
    {
        $this->container['custom_attributes'] = $custom_attributes;

        return $this;
    }

    /**
     * Gets is_collectible
     *
     * @return bool
     */
    public function getIsCollectible()
    {
        return $this->container['is_collectible'];
    }

    /**
     * Sets is_collectible
     *
     * @param bool $is_collectible is_collectible
     *
     * @return $this
     */
    public function setIsCollectible($is_collectible)
    {
        $this->container['is_collectible'] = $is_collectible;

        return $this;
    }

    /**
     * Gets metadata_token
     *
     * @return int
     */
    public function getMetadataToken()
    {
        return $this->container['metadata_token'];
    }

    /**
     * Sets metadata_token
     *
     * @param int $metadata_token metadata_token
     *
     * @return $this
     */
    public function setMetadataToken($metadata_token)
    {
        $this->container['metadata_token'] = $metadata_token;

        return $this;
    }

    /**
     * Gets type_handle
     *
     * @return \Swagger\Client\Model\RuntimeTypeHandle
     */
    public function getTypeHandle()
    {
        return $this->container['type_handle'];
    }

    /**
     * Sets type_handle
     *
     * @param \Swagger\Client\Model\RuntimeTypeHandle $type_handle type_handle
     *
     * @return $this
     */
    public function setTypeHandle($type_handle)
    {
        $this->container['type_handle'] = $type_handle;

        return $this;
    }

    /**
     * Gets is_interface
     *
     * @return bool
     */
    public function getIsInterface()
    {
        return $this->container['is_interface'];
    }

    /**
     * Sets is_interface
     *
     * @param bool $is_interface is_interface
     *
     * @return $this
     */
    public function setIsInterface($is_interface)
    {
        $this->container['is_interface'] = $is_interface;

        return $this;
    }

    /**
     * Gets member_type
     *
     * @return \Swagger\Client\Model\MemberTypes
     */
    public function getMemberType()
    {
        return $this->container['member_type'];
    }

    /**
     * Sets member_type
     *
     * @param \Swagger\Client\Model\MemberTypes $member_type member_type
     *
     * @return $this
     */
    public function setMemberType($member_type)
    {
        $this->container['member_type'] = $member_type;

        return $this;
    }

    /**
     * Gets namespace
     *
     * @return string
     */
    public function getNamespace()
    {
        return $this->container['namespace'];
    }

    /**
     * Sets namespace
     *
     * @param string $namespace namespace
     *
     * @return $this
     */
    public function setNamespace($namespace)
    {
        $this->container['namespace'] = $namespace;

        return $this;
    }

    /**
     * Gets assembly_qualified_name
     *
     * @return string
     */
    public function getAssemblyQualifiedName()
    {
        return $this->container['assembly_qualified_name'];
    }

    /**
     * Sets assembly_qualified_name
     *
     * @param string $assembly_qualified_name assembly_qualified_name
     *
     * @return $this
     */
    public function setAssemblyQualifiedName($assembly_qualified_name)
    {
        $this->container['assembly_qualified_name'] = $assembly_qualified_name;

        return $this;
    }

    /**
     * Gets full_name
     *
     * @return string
     */
    public function getFullName()
    {
        return $this->container['full_name'];
    }

    /**
     * Sets full_name
     *
     * @param string $full_name full_name
     *
     * @return $this
     */
    public function setFullName($full_name)
    {
        $this->container['full_name'] = $full_name;

        return $this;
    }

    /**
     * Gets assembly
     *
     * @return \Swagger\Client\Model\Assembly
     */
    public function getAssembly()
    {
        return $this->container['assembly'];
    }

    /**
     * Sets assembly
     *
     * @param \Swagger\Client\Model\Assembly $assembly assembly
     *
     * @return $this
     */
    public function setAssembly($assembly)
    {
        $this->container['assembly'] = $assembly;

        return $this;
    }

    /**
     * Gets module
     *
     * @return \Swagger\Client\Model\Module
     */
    public function getModule()
    {
        return $this->container['module'];
    }

    /**
     * Sets module
     *
     * @param \Swagger\Client\Model\Module $module module
     *
     * @return $this
     */
    public function setModule($module)
    {
        $this->container['module'] = $module;

        return $this;
    }

    /**
     * Gets is_nested
     *
     * @return bool
     */
    public function getIsNested()
    {
        return $this->container['is_nested'];
    }

    /**
     * Sets is_nested
     *
     * @param bool $is_nested is_nested
     *
     * @return $this
     */
    public function setIsNested($is_nested)
    {
        $this->container['is_nested'] = $is_nested;

        return $this;
    }

    /**
     * Gets declaring_type
     *
     * @return \Swagger\Client\Model\Type
     */
    public function getDeclaringType()
    {
        return $this->container['declaring_type'];
    }

    /**
     * Sets declaring_type
     *
     * @param \Swagger\Client\Model\Type $declaring_type declaring_type
     *
     * @return $this
     */
    public function setDeclaringType($declaring_type)
    {
        $this->container['declaring_type'] = $declaring_type;

        return $this;
    }

    /**
     * Gets declaring_method
     *
     * @return \Swagger\Client\Model\MethodBase
     */
    public function getDeclaringMethod()
    {
        return $this->container['declaring_method'];
    }

    /**
     * Sets declaring_method
     *
     * @param \Swagger\Client\Model\MethodBase $declaring_method declaring_method
     *
     * @return $this
     */
    public function setDeclaringMethod($declaring_method)
    {
        $this->container['declaring_method'] = $declaring_method;

        return $this;
    }

    /**
     * Gets reflected_type
     *
     * @return \Swagger\Client\Model\Type
     */
    public function getReflectedType()
    {
        return $this->container['reflected_type'];
    }

    /**
     * Sets reflected_type
     *
     * @param \Swagger\Client\Model\Type $reflected_type reflected_type
     *
     * @return $this
     */
    public function setReflectedType($reflected_type)
    {
        $this->container['reflected_type'] = $reflected_type;

        return $this;
    }

    /**
     * Gets underlying_system_type
     *
     * @return \Swagger\Client\Model\Type
     */
    public function getUnderlyingSystemType()
    {
        return $this->container['underlying_system_type'];
    }

    /**
     * Sets underlying_system_type
     *
     * @param \Swagger\Client\Model\Type $underlying_system_type underlying_system_type
     *
     * @return $this
     */
    public function setUnderlyingSystemType($underlying_system_type)
    {
        $this->container['underlying_system_type'] = $underlying_system_type;

        return $this;
    }

    /**
     * Gets is_type_definition
     *
     * @return bool
     */
    public function getIsTypeDefinition()
    {
        return $this->container['is_type_definition'];
    }

    /**
     * Sets is_type_definition
     *
     * @param bool $is_type_definition is_type_definition
     *
     * @return $this
     */
    public function setIsTypeDefinition($is_type_definition)
    {
        $this->container['is_type_definition'] = $is_type_definition;

        return $this;
    }

    /**
     * Gets is_array
     *
     * @return bool
     */
    public function getIsArray()
    {
        return $this->container['is_array'];
    }

    /**
     * Sets is_array
     *
     * @param bool $is_array is_array
     *
     * @return $this
     */
    public function setIsArray($is_array)
    {
        $this->container['is_array'] = $is_array;

        return $this;
    }

    /**
     * Gets is_by_ref
     *
     * @return bool
     */
    public function getIsByRef()
    {
        return $this->container['is_by_ref'];
    }

    /**
     * Sets is_by_ref
     *
     * @param bool $is_by_ref is_by_ref
     *
     * @return $this
     */
    public function setIsByRef($is_by_ref)
    {
        $this->container['is_by_ref'] = $is_by_ref;

        return $this;
    }

    /**
     * Gets is_pointer
     *
     * @return bool
     */
    public function getIsPointer()
    {
        return $this->container['is_pointer'];
    }

    /**
     * Sets is_pointer
     *
     * @param bool $is_pointer is_pointer
     *
     * @return $this
     */
    public function setIsPointer($is_pointer)
    {
        $this->container['is_pointer'] = $is_pointer;

        return $this;
    }

    /**
     * Gets is_constructed_generic_type
     *
     * @return bool
     */
    public function getIsConstructedGenericType()
    {
        return $this->container['is_constructed_generic_type'];
    }

    /**
     * Sets is_constructed_generic_type
     *
     * @param bool $is_constructed_generic_type is_constructed_generic_type
     *
     * @return $this
     */
    public function setIsConstructedGenericType($is_constructed_generic_type)
    {
        $this->container['is_constructed_generic_type'] = $is_constructed_generic_type;

        return $this;
    }

    /**
     * Gets is_generic_parameter
     *
     * @return bool
     */
    public function getIsGenericParameter()
    {
        return $this->container['is_generic_parameter'];
    }

    /**
     * Sets is_generic_parameter
     *
     * @param bool $is_generic_parameter is_generic_parameter
     *
     * @return $this
     */
    public function setIsGenericParameter($is_generic_parameter)
    {
        $this->container['is_generic_parameter'] = $is_generic_parameter;

        return $this;
    }

    /**
     * Gets is_generic_type_parameter
     *
     * @return bool
     */
    public function getIsGenericTypeParameter()
    {
        return $this->container['is_generic_type_parameter'];
    }

    /**
     * Sets is_generic_type_parameter
     *
     * @param bool $is_generic_type_parameter is_generic_type_parameter
     *
     * @return $this
     */
    public function setIsGenericTypeParameter($is_generic_type_parameter)
    {
        $this->container['is_generic_type_parameter'] = $is_generic_type_parameter;

        return $this;
    }

    /**
     * Gets is_generic_method_parameter
     *
     * @return bool
     */
    public function getIsGenericMethodParameter()
    {
        return $this->container['is_generic_method_parameter'];
    }

    /**
     * Sets is_generic_method_parameter
     *
     * @param bool $is_generic_method_parameter is_generic_method_parameter
     *
     * @return $this
     */
    public function setIsGenericMethodParameter($is_generic_method_parameter)
    {
        $this->container['is_generic_method_parameter'] = $is_generic_method_parameter;

        return $this;
    }

    /**
     * Gets is_generic_type
     *
     * @return bool
     */
    public function getIsGenericType()
    {
        return $this->container['is_generic_type'];
    }

    /**
     * Sets is_generic_type
     *
     * @param bool $is_generic_type is_generic_type
     *
     * @return $this
     */
    public function setIsGenericType($is_generic_type)
    {
        $this->container['is_generic_type'] = $is_generic_type;

        return $this;
    }

    /**
     * Gets is_generic_type_definition
     *
     * @return bool
     */
    public function getIsGenericTypeDefinition()
    {
        return $this->container['is_generic_type_definition'];
    }

    /**
     * Sets is_generic_type_definition
     *
     * @param bool $is_generic_type_definition is_generic_type_definition
     *
     * @return $this
     */
    public function setIsGenericTypeDefinition($is_generic_type_definition)
    {
        $this->container['is_generic_type_definition'] = $is_generic_type_definition;

        return $this;
    }

    /**
     * Gets is_sz_array
     *
     * @return bool
     */
    public function getIsSzArray()
    {
        return $this->container['is_sz_array'];
    }

    /**
     * Sets is_sz_array
     *
     * @param bool $is_sz_array is_sz_array
     *
     * @return $this
     */
    public function setIsSzArray($is_sz_array)
    {
        $this->container['is_sz_array'] = $is_sz_array;

        return $this;
    }

    /**
     * Gets is_variable_bound_array
     *
     * @return bool
     */
    public function getIsVariableBoundArray()
    {
        return $this->container['is_variable_bound_array'];
    }

    /**
     * Sets is_variable_bound_array
     *
     * @param bool $is_variable_bound_array is_variable_bound_array
     *
     * @return $this
     */
    public function setIsVariableBoundArray($is_variable_bound_array)
    {
        $this->container['is_variable_bound_array'] = $is_variable_bound_array;

        return $this;
    }

    /**
     * Gets is_by_ref_like
     *
     * @return bool
     */
    public function getIsByRefLike()
    {
        return $this->container['is_by_ref_like'];
    }

    /**
     * Sets is_by_ref_like
     *
     * @param bool $is_by_ref_like is_by_ref_like
     *
     * @return $this
     */
    public function setIsByRefLike($is_by_ref_like)
    {
        $this->container['is_by_ref_like'] = $is_by_ref_like;

        return $this;
    }

    /**
     * Gets has_element_type
     *
     * @return bool
     */
    public function getHasElementType()
    {
        return $this->container['has_element_type'];
    }

    /**
     * Sets has_element_type
     *
     * @param bool $has_element_type has_element_type
     *
     * @return $this
     */
    public function setHasElementType($has_element_type)
    {
        $this->container['has_element_type'] = $has_element_type;

        return $this;
    }

    /**
     * Gets generic_type_arguments
     *
     * @return \Swagger\Client\Model\Type[]
     */
    public function getGenericTypeArguments()
    {
        return $this->container['generic_type_arguments'];
    }

    /**
     * Sets generic_type_arguments
     *
     * @param \Swagger\Client\Model\Type[] $generic_type_arguments generic_type_arguments
     *
     * @return $this
     */
    public function setGenericTypeArguments($generic_type_arguments)
    {
        $this->container['generic_type_arguments'] = $generic_type_arguments;

        return $this;
    }

    /**
     * Gets generic_parameter_position
     *
     * @return int
     */
    public function getGenericParameterPosition()
    {
        return $this->container['generic_parameter_position'];
    }

    /**
     * Sets generic_parameter_position
     *
     * @param int $generic_parameter_position generic_parameter_position
     *
     * @return $this
     */
    public function setGenericParameterPosition($generic_parameter_position)
    {
        $this->container['generic_parameter_position'] = $generic_parameter_position;

        return $this;
    }

    /**
     * Gets generic_parameter_attributes
     *
     * @return \Swagger\Client\Model\GenericParameterAttributes
     */
    public function getGenericParameterAttributes()
    {
        return $this->container['generic_parameter_attributes'];
    }

    /**
     * Sets generic_parameter_attributes
     *
     * @param \Swagger\Client\Model\GenericParameterAttributes $generic_parameter_attributes generic_parameter_attributes
     *
     * @return $this
     */
    public function setGenericParameterAttributes($generic_parameter_attributes)
    {
        $this->container['generic_parameter_attributes'] = $generic_parameter_attributes;

        return $this;
    }

    /**
     * Gets attributes
     *
     * @return \Swagger\Client\Model\TypeAttributes
     */
    public function getAttributes()
    {
        return $this->container['attributes'];
    }

    /**
     * Sets attributes
     *
     * @param \Swagger\Client\Model\TypeAttributes $attributes attributes
     *
     * @return $this
     */
    public function setAttributes($attributes)
    {
        $this->container['attributes'] = $attributes;

        return $this;
    }

    /**
     * Gets is_abstract
     *
     * @return bool
     */
    public function getIsAbstract()
    {
        return $this->container['is_abstract'];
    }

    /**
     * Sets is_abstract
     *
     * @param bool $is_abstract is_abstract
     *
     * @return $this
     */
    public function setIsAbstract($is_abstract)
    {
        $this->container['is_abstract'] = $is_abstract;

        return $this;
    }

    /**
     * Gets is_import
     *
     * @return bool
     */
    public function getIsImport()
    {
        return $this->container['is_import'];
    }

    /**
     * Sets is_import
     *
     * @param bool $is_import is_import
     *
     * @return $this
     */
    public function setIsImport($is_import)
    {
        $this->container['is_import'] = $is_import;

        return $this;
    }

    /**
     * Gets is_sealed
     *
     * @return bool
     */
    public function getIsSealed()
    {
        return $this->container['is_sealed'];
    }

    /**
     * Sets is_sealed
     *
     * @param bool $is_sealed is_sealed
     *
     * @return $this
     */
    public function setIsSealed($is_sealed)
    {
        $this->container['is_sealed'] = $is_sealed;

        return $this;
    }

    /**
     * Gets is_special_name
     *
     * @return bool
     */
    public function getIsSpecialName()
    {
        return $this->container['is_special_name'];
    }

    /**
     * Sets is_special_name
     *
     * @param bool $is_special_name is_special_name
     *
     * @return $this
     */
    public function setIsSpecialName($is_special_name)
    {
        $this->container['is_special_name'] = $is_special_name;

        return $this;
    }

    /**
     * Gets is_class
     *
     * @return bool
     */
    public function getIsClass()
    {
        return $this->container['is_class'];
    }

    /**
     * Sets is_class
     *
     * @param bool $is_class is_class
     *
     * @return $this
     */
    public function setIsClass($is_class)
    {
        $this->container['is_class'] = $is_class;

        return $this;
    }

    /**
     * Gets is_nested_assembly
     *
     * @return bool
     */
    public function getIsNestedAssembly()
    {
        return $this->container['is_nested_assembly'];
    }

    /**
     * Sets is_nested_assembly
     *
     * @param bool $is_nested_assembly is_nested_assembly
     *
     * @return $this
     */
    public function setIsNestedAssembly($is_nested_assembly)
    {
        $this->container['is_nested_assembly'] = $is_nested_assembly;

        return $this;
    }

    /**
     * Gets is_nested_fam_and_assem
     *
     * @return bool
     */
    public function getIsNestedFamAndAssem()
    {
        return $this->container['is_nested_fam_and_assem'];
    }

    /**
     * Sets is_nested_fam_and_assem
     *
     * @param bool $is_nested_fam_and_assem is_nested_fam_and_assem
     *
     * @return $this
     */
    public function setIsNestedFamAndAssem($is_nested_fam_and_assem)
    {
        $this->container['is_nested_fam_and_assem'] = $is_nested_fam_and_assem;

        return $this;
    }

    /**
     * Gets is_nested_family
     *
     * @return bool
     */
    public function getIsNestedFamily()
    {
        return $this->container['is_nested_family'];
    }

    /**
     * Sets is_nested_family
     *
     * @param bool $is_nested_family is_nested_family
     *
     * @return $this
     */
    public function setIsNestedFamily($is_nested_family)
    {
        $this->container['is_nested_family'] = $is_nested_family;

        return $this;
    }

    /**
     * Gets is_nested_fam_or_assem
     *
     * @return bool
     */
    public function getIsNestedFamOrAssem()
    {
        return $this->container['is_nested_fam_or_assem'];
    }

    /**
     * Sets is_nested_fam_or_assem
     *
     * @param bool $is_nested_fam_or_assem is_nested_fam_or_assem
     *
     * @return $this
     */
    public function setIsNestedFamOrAssem($is_nested_fam_or_assem)
    {
        $this->container['is_nested_fam_or_assem'] = $is_nested_fam_or_assem;

        return $this;
    }

    /**
     * Gets is_nested_private
     *
     * @return bool
     */
    public function getIsNestedPrivate()
    {
        return $this->container['is_nested_private'];
    }

    /**
     * Sets is_nested_private
     *
     * @param bool $is_nested_private is_nested_private
     *
     * @return $this
     */
    public function setIsNestedPrivate($is_nested_private)
    {
        $this->container['is_nested_private'] = $is_nested_private;

        return $this;
    }

    /**
     * Gets is_nested_public
     *
     * @return bool
     */
    public function getIsNestedPublic()
    {
        return $this->container['is_nested_public'];
    }

    /**
     * Sets is_nested_public
     *
     * @param bool $is_nested_public is_nested_public
     *
     * @return $this
     */
    public function setIsNestedPublic($is_nested_public)
    {
        $this->container['is_nested_public'] = $is_nested_public;

        return $this;
    }

    /**
     * Gets is_not_public
     *
     * @return bool
     */
    public function getIsNotPublic()
    {
        return $this->container['is_not_public'];
    }

    /**
     * Sets is_not_public
     *
     * @param bool $is_not_public is_not_public
     *
     * @return $this
     */
    public function setIsNotPublic($is_not_public)
    {
        $this->container['is_not_public'] = $is_not_public;

        return $this;
    }

    /**
     * Gets is_public
     *
     * @return bool
     */
    public function getIsPublic()
    {
        return $this->container['is_public'];
    }

    /**
     * Sets is_public
     *
     * @param bool $is_public is_public
     *
     * @return $this
     */
    public function setIsPublic($is_public)
    {
        $this->container['is_public'] = $is_public;

        return $this;
    }

    /**
     * Gets is_auto_layout
     *
     * @return bool
     */
    public function getIsAutoLayout()
    {
        return $this->container['is_auto_layout'];
    }

    /**
     * Sets is_auto_layout
     *
     * @param bool $is_auto_layout is_auto_layout
     *
     * @return $this
     */
    public function setIsAutoLayout($is_auto_layout)
    {
        $this->container['is_auto_layout'] = $is_auto_layout;

        return $this;
    }

    /**
     * Gets is_explicit_layout
     *
     * @return bool
     */
    public function getIsExplicitLayout()
    {
        return $this->container['is_explicit_layout'];
    }

    /**
     * Sets is_explicit_layout
     *
     * @param bool $is_explicit_layout is_explicit_layout
     *
     * @return $this
     */
    public function setIsExplicitLayout($is_explicit_layout)
    {
        $this->container['is_explicit_layout'] = $is_explicit_layout;

        return $this;
    }

    /**
     * Gets is_layout_sequential
     *
     * @return bool
     */
    public function getIsLayoutSequential()
    {
        return $this->container['is_layout_sequential'];
    }

    /**
     * Sets is_layout_sequential
     *
     * @param bool $is_layout_sequential is_layout_sequential
     *
     * @return $this
     */
    public function setIsLayoutSequential($is_layout_sequential)
    {
        $this->container['is_layout_sequential'] = $is_layout_sequential;

        return $this;
    }

    /**
     * Gets is_ansi_class
     *
     * @return bool
     */
    public function getIsAnsiClass()
    {
        return $this->container['is_ansi_class'];
    }

    /**
     * Sets is_ansi_class
     *
     * @param bool $is_ansi_class is_ansi_class
     *
     * @return $this
     */
    public function setIsAnsiClass($is_ansi_class)
    {
        $this->container['is_ansi_class'] = $is_ansi_class;

        return $this;
    }

    /**
     * Gets is_auto_class
     *
     * @return bool
     */
    public function getIsAutoClass()
    {
        return $this->container['is_auto_class'];
    }

    /**
     * Sets is_auto_class
     *
     * @param bool $is_auto_class is_auto_class
     *
     * @return $this
     */
    public function setIsAutoClass($is_auto_class)
    {
        $this->container['is_auto_class'] = $is_auto_class;

        return $this;
    }

    /**
     * Gets is_unicode_class
     *
     * @return bool
     */
    public function getIsUnicodeClass()
    {
        return $this->container['is_unicode_class'];
    }

    /**
     * Sets is_unicode_class
     *
     * @param bool $is_unicode_class is_unicode_class
     *
     * @return $this
     */
    public function setIsUnicodeClass($is_unicode_class)
    {
        $this->container['is_unicode_class'] = $is_unicode_class;

        return $this;
    }

    /**
     * Gets is_com_object
     *
     * @return bool
     */
    public function getIsComObject()
    {
        return $this->container['is_com_object'];
    }

    /**
     * Sets is_com_object
     *
     * @param bool $is_com_object is_com_object
     *
     * @return $this
     */
    public function setIsComObject($is_com_object)
    {
        $this->container['is_com_object'] = $is_com_object;

        return $this;
    }

    /**
     * Gets is_contextful
     *
     * @return bool
     */
    public function getIsContextful()
    {
        return $this->container['is_contextful'];
    }

    /**
     * Sets is_contextful
     *
     * @param bool $is_contextful is_contextful
     *
     * @return $this
     */
    public function setIsContextful($is_contextful)
    {
        $this->container['is_contextful'] = $is_contextful;

        return $this;
    }

    /**
     * Gets is_enum
     *
     * @return bool
     */
    public function getIsEnum()
    {
        return $this->container['is_enum'];
    }

    /**
     * Sets is_enum
     *
     * @param bool $is_enum is_enum
     *
     * @return $this
     */
    public function setIsEnum($is_enum)
    {
        $this->container['is_enum'] = $is_enum;

        return $this;
    }

    /**
     * Gets is_marshal_by_ref
     *
     * @return bool
     */
    public function getIsMarshalByRef()
    {
        return $this->container['is_marshal_by_ref'];
    }

    /**
     * Sets is_marshal_by_ref
     *
     * @param bool $is_marshal_by_ref is_marshal_by_ref
     *
     * @return $this
     */
    public function setIsMarshalByRef($is_marshal_by_ref)
    {
        $this->container['is_marshal_by_ref'] = $is_marshal_by_ref;

        return $this;
    }

    /**
     * Gets is_primitive
     *
     * @return bool
     */
    public function getIsPrimitive()
    {
        return $this->container['is_primitive'];
    }

    /**
     * Sets is_primitive
     *
     * @param bool $is_primitive is_primitive
     *
     * @return $this
     */
    public function setIsPrimitive($is_primitive)
    {
        $this->container['is_primitive'] = $is_primitive;

        return $this;
    }

    /**
     * Gets is_value_type
     *
     * @return bool
     */
    public function getIsValueType()
    {
        return $this->container['is_value_type'];
    }

    /**
     * Sets is_value_type
     *
     * @param bool $is_value_type is_value_type
     *
     * @return $this
     */
    public function setIsValueType($is_value_type)
    {
        $this->container['is_value_type'] = $is_value_type;

        return $this;
    }

    /**
     * Gets is_signature_type
     *
     * @return bool
     */
    public function getIsSignatureType()
    {
        return $this->container['is_signature_type'];
    }

    /**
     * Sets is_signature_type
     *
     * @param bool $is_signature_type is_signature_type
     *
     * @return $this
     */
    public function setIsSignatureType($is_signature_type)
    {
        $this->container['is_signature_type'] = $is_signature_type;

        return $this;
    }

    /**
     * Gets is_security_critical
     *
     * @return bool
     */
    public function getIsSecurityCritical()
    {
        return $this->container['is_security_critical'];
    }

    /**
     * Sets is_security_critical
     *
     * @param bool $is_security_critical is_security_critical
     *
     * @return $this
     */
    public function setIsSecurityCritical($is_security_critical)
    {
        $this->container['is_security_critical'] = $is_security_critical;

        return $this;
    }

    /**
     * Gets is_security_safe_critical
     *
     * @return bool
     */
    public function getIsSecuritySafeCritical()
    {
        return $this->container['is_security_safe_critical'];
    }

    /**
     * Sets is_security_safe_critical
     *
     * @param bool $is_security_safe_critical is_security_safe_critical
     *
     * @return $this
     */
    public function setIsSecuritySafeCritical($is_security_safe_critical)
    {
        $this->container['is_security_safe_critical'] = $is_security_safe_critical;

        return $this;
    }

    /**
     * Gets is_security_transparent
     *
     * @return bool
     */
    public function getIsSecurityTransparent()
    {
        return $this->container['is_security_transparent'];
    }

    /**
     * Sets is_security_transparent
     *
     * @param bool $is_security_transparent is_security_transparent
     *
     * @return $this
     */
    public function setIsSecurityTransparent($is_security_transparent)
    {
        $this->container['is_security_transparent'] = $is_security_transparent;

        return $this;
    }

    /**
     * Gets struct_layout_attribute
     *
     * @return \Swagger\Client\Model\StructLayoutAttribute
     */
    public function getStructLayoutAttribute()
    {
        return $this->container['struct_layout_attribute'];
    }

    /**
     * Sets struct_layout_attribute
     *
     * @param \Swagger\Client\Model\StructLayoutAttribute $struct_layout_attribute struct_layout_attribute
     *
     * @return $this
     */
    public function setStructLayoutAttribute($struct_layout_attribute)
    {
        $this->container['struct_layout_attribute'] = $struct_layout_attribute;

        return $this;
    }

    /**
     * Gets type_initializer
     *
     * @return \Swagger\Client\Model\ConstructorInfo
     */
    public function getTypeInitializer()
    {
        return $this->container['type_initializer'];
    }

    /**
     * Sets type_initializer
     *
     * @param \Swagger\Client\Model\ConstructorInfo $type_initializer type_initializer
     *
     * @return $this
     */
    public function setTypeInitializer($type_initializer)
    {
        $this->container['type_initializer'] = $type_initializer;

        return $this;
    }

    /**
     * Gets g_uid
     *
     * @return string
     */
    public function getGUid()
    {
        return $this->container['g_uid'];
    }

    /**
     * Sets g_uid
     *
     * @param string $g_uid g_uid
     *
     * @return $this
     */
    public function setGUid($g_uid)
    {
        $this->container['g_uid'] = $g_uid;

        return $this;
    }

    /**
     * Gets base_type
     *
     * @return \Swagger\Client\Model\Type
     */
    public function getBaseType()
    {
        return $this->container['base_type'];
    }

    /**
     * Sets base_type
     *
     * @param \Swagger\Client\Model\Type $base_type base_type
     *
     * @return $this
     */
    public function setBaseType($base_type)
    {
        $this->container['base_type'] = $base_type;

        return $this;
    }

    /**
     * Gets is_serializable
     *
     * @return bool
     */
    public function getIsSerializable()
    {
        return $this->container['is_serializable'];
    }

    /**
     * Sets is_serializable
     *
     * @param bool $is_serializable is_serializable
     *
     * @return $this
     */
    public function setIsSerializable($is_serializable)
    {
        $this->container['is_serializable'] = $is_serializable;

        return $this;
    }

    /**
     * Gets contains_generic_parameters
     *
     * @return bool
     */
    public function getContainsGenericParameters()
    {
        return $this->container['contains_generic_parameters'];
    }

    /**
     * Sets contains_generic_parameters
     *
     * @param bool $contains_generic_parameters contains_generic_parameters
     *
     * @return $this
     */
    public function setContainsGenericParameters($contains_generic_parameters)
    {
        $this->container['contains_generic_parameters'] = $contains_generic_parameters;

        return $this;
    }

    /**
     * Gets is_visible
     *
     * @return bool
     */
    public function getIsVisible()
    {
        return $this->container['is_visible'];
    }

    /**
     * Sets is_visible
     *
     * @param bool $is_visible is_visible
     *
     * @return $this
     */
    public function setIsVisible($is_visible)
    {
        $this->container['is_visible'] = $is_visible;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange] 
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange] 
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange] 
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange] 
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
