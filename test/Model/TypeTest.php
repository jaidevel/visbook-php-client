<?php
/**
 * TypeTest
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * VisBook booking-API
 *
 * ## About localization/internationalization We currently support 6 languages: **Norwegian, English, Swedish, Danish, German, Russian**,  The fallback language is always **english**.  Translations are used for products and properties returned by the api, but the quality will depend on the hotel to have provided translations in the requested language.   Specify the language you want to use by using the [Accept-Language](https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Accept-Language) header.  ## About reservations  Once you make a reservation, you take up capacity at the hotel. Reservations must be kept alive every 40 seconds, else they expire to free up the capacity. When doing checkout (i.e when the user is sent to the payment processor), the expiration of the reservation is extended by 20 minutes. This means you do not need to ping the api while the user is \"away\" doing payment.   There is a **hard limit of 30 minutes before reservations are expired** no questions asked.**   This is to avoid someone holding capacity indefinitely.  ## About authorization Before a guest is able to do payment/checkout, the guest must have a valid cookie. This is obtained by doing the login/validation flow. The `/login` request sends the user a one-time-passord on the selected medium (email, sms). This code must be returned to us via the `/validation` endpoint within reasonable time. `/validation` will return a httpOnly cookie, which must be present when doing `/checkout`. This cookie must also be present if you want to use endpoints that relate to customer data, like `/orders` and `/user`.   `/validation` also returns customer data, *if the customer exists*, which can be used to \"pre-fill\" customer data for checkout.  ## About checkout #### Amount The client is responsible for calculating an `amount`, which is the amount the guest should pay. This serves as a security mechanism, to see that the client and server *agrees* on the amount, to make sure there hasn't been any \"mismatch\" between client and server.  #### PaymentType The client should make a call to `/checkout/paymentTypes` to see which payment types are available.  #### Terms The client should make a call to `/setup/terms` to present the terms to the user. Checkout is only possible if `acceptedTerms` is `true`.  #### Error/Success Upon success, the user will be forwarded to `successUrl`, with `orderGroup` as a query parameter. Example: https://reservations.visbook.com/5252/order?orderGroupId=1111111   You can then use orderGroupId to call `/ordergroups/{id}` to present an online order confirmation. Sms/Email order confirmation is handled by the api automatically.  Upon error, the user will be forwarded to `errorUrl` with the query parameter `errorCode`. Example: https://reservations.visbook.com/1047/checkout?errorCode=1  Where errorCode conforms to the following table:  | ErrorCode | Description | | --------- | ----------- |  | 1 | Unable to reserve the amount on the card. Contact card issuer. | | 2 | Unable to capture the amount on the card. Contact card issuer. | | 3 | Unable to query the payment provider about the transaction. Contact the hotel. | | 4 | Unable to annul (refund) the transaction. Contact the hotel. | | 6 | Unable to set order to status paid. Contact the hotel. | | 7 | Unknown response from the payment processor. Contact the hotel. | | 8 | Unable to find the order. Contact the hotel. | | 9 | The order has been modified by someone else. Contact the hotel. | | 10 | Unable to save the order. Accounting error due to amount being lower than required fixed amount on this account. Contact the hotel. | | 11 | Unable to save the order, there's an error with the price. Contact the hotel. | | 12 | Unable to save the order, the invoice customer was not found. Contact the hotel. | | 13 | Some reservations have expired. Try again. | | 14 | Unable to process sale. Contact card issuer. |  ## General flow  1. Create product reservations via `/reservations` endpoint 2. Keep reservations alive every 30-40 seconds via `/reservations/ping` (If you don't your reservations will expire) 3. Authorize guest via /login and /validation to receive a cookie you can use to checkout 4. Complete the order via /checkout. The guest _must_ be authorized before this step is possible.
 *
 * OpenAPI spec version: 8.38.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.36
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Please update the test case below to test the model.
 */

namespace Swagger\Client;

/**
 * TypeTest Class Doc Comment
 *
 * @category    Class
 * @description Type
 * @package     Swagger\Client
 * @author      Swagger Codegen team
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class TypeTest extends \PHPUnit_Framework_TestCase
{

    /**
     * Setup before running any test case
     */
    public static function setUpBeforeClass()
    {
    }

    /**
     * Setup before running each test case
     */
    public function setUp()
    {
    }

    /**
     * Clean up after running each test case
     */
    public function tearDown()
    {
    }

    /**
     * Clean up after running all test cases
     */
    public static function tearDownAfterClass()
    {
    }

    /**
     * Test "Type"
     */
    public function testType()
    {
    }

    /**
     * Test attribute "name"
     */
    public function testPropertyName()
    {
    }

    /**
     * Test attribute "custom_attributes"
     */
    public function testPropertyCustomAttributes()
    {
    }

    /**
     * Test attribute "is_collectible"
     */
    public function testPropertyIsCollectible()
    {
    }

    /**
     * Test attribute "metadata_token"
     */
    public function testPropertyMetadataToken()
    {
    }

    /**
     * Test attribute "type_handle"
     */
    public function testPropertyTypeHandle()
    {
    }

    /**
     * Test attribute "is_interface"
     */
    public function testPropertyIsInterface()
    {
    }

    /**
     * Test attribute "member_type"
     */
    public function testPropertyMemberType()
    {
    }

    /**
     * Test attribute "namespace"
     */
    public function testPropertyNamespace()
    {
    }

    /**
     * Test attribute "assembly_qualified_name"
     */
    public function testPropertyAssemblyQualifiedName()
    {
    }

    /**
     * Test attribute "full_name"
     */
    public function testPropertyFullName()
    {
    }

    /**
     * Test attribute "assembly"
     */
    public function testPropertyAssembly()
    {
    }

    /**
     * Test attribute "module"
     */
    public function testPropertyModule()
    {
    }

    /**
     * Test attribute "is_nested"
     */
    public function testPropertyIsNested()
    {
    }

    /**
     * Test attribute "declaring_type"
     */
    public function testPropertyDeclaringType()
    {
    }

    /**
     * Test attribute "declaring_method"
     */
    public function testPropertyDeclaringMethod()
    {
    }

    /**
     * Test attribute "reflected_type"
     */
    public function testPropertyReflectedType()
    {
    }

    /**
     * Test attribute "underlying_system_type"
     */
    public function testPropertyUnderlyingSystemType()
    {
    }

    /**
     * Test attribute "is_type_definition"
     */
    public function testPropertyIsTypeDefinition()
    {
    }

    /**
     * Test attribute "is_array"
     */
    public function testPropertyIsArray()
    {
    }

    /**
     * Test attribute "is_by_ref"
     */
    public function testPropertyIsByRef()
    {
    }

    /**
     * Test attribute "is_pointer"
     */
    public function testPropertyIsPointer()
    {
    }

    /**
     * Test attribute "is_constructed_generic_type"
     */
    public function testPropertyIsConstructedGenericType()
    {
    }

    /**
     * Test attribute "is_generic_parameter"
     */
    public function testPropertyIsGenericParameter()
    {
    }

    /**
     * Test attribute "is_generic_type_parameter"
     */
    public function testPropertyIsGenericTypeParameter()
    {
    }

    /**
     * Test attribute "is_generic_method_parameter"
     */
    public function testPropertyIsGenericMethodParameter()
    {
    }

    /**
     * Test attribute "is_generic_type"
     */
    public function testPropertyIsGenericType()
    {
    }

    /**
     * Test attribute "is_generic_type_definition"
     */
    public function testPropertyIsGenericTypeDefinition()
    {
    }

    /**
     * Test attribute "is_sz_array"
     */
    public function testPropertyIsSzArray()
    {
    }

    /**
     * Test attribute "is_variable_bound_array"
     */
    public function testPropertyIsVariableBoundArray()
    {
    }

    /**
     * Test attribute "is_by_ref_like"
     */
    public function testPropertyIsByRefLike()
    {
    }

    /**
     * Test attribute "has_element_type"
     */
    public function testPropertyHasElementType()
    {
    }

    /**
     * Test attribute "generic_type_arguments"
     */
    public function testPropertyGenericTypeArguments()
    {
    }

    /**
     * Test attribute "generic_parameter_position"
     */
    public function testPropertyGenericParameterPosition()
    {
    }

    /**
     * Test attribute "generic_parameter_attributes"
     */
    public function testPropertyGenericParameterAttributes()
    {
    }

    /**
     * Test attribute "attributes"
     */
    public function testPropertyAttributes()
    {
    }

    /**
     * Test attribute "is_abstract"
     */
    public function testPropertyIsAbstract()
    {
    }

    /**
     * Test attribute "is_import"
     */
    public function testPropertyIsImport()
    {
    }

    /**
     * Test attribute "is_sealed"
     */
    public function testPropertyIsSealed()
    {
    }

    /**
     * Test attribute "is_special_name"
     */
    public function testPropertyIsSpecialName()
    {
    }

    /**
     * Test attribute "is_class"
     */
    public function testPropertyIsClass()
    {
    }

    /**
     * Test attribute "is_nested_assembly"
     */
    public function testPropertyIsNestedAssembly()
    {
    }

    /**
     * Test attribute "is_nested_fam_and_assem"
     */
    public function testPropertyIsNestedFamAndAssem()
    {
    }

    /**
     * Test attribute "is_nested_family"
     */
    public function testPropertyIsNestedFamily()
    {
    }

    /**
     * Test attribute "is_nested_fam_or_assem"
     */
    public function testPropertyIsNestedFamOrAssem()
    {
    }

    /**
     * Test attribute "is_nested_private"
     */
    public function testPropertyIsNestedPrivate()
    {
    }

    /**
     * Test attribute "is_nested_public"
     */
    public function testPropertyIsNestedPublic()
    {
    }

    /**
     * Test attribute "is_not_public"
     */
    public function testPropertyIsNotPublic()
    {
    }

    /**
     * Test attribute "is_public"
     */
    public function testPropertyIsPublic()
    {
    }

    /**
     * Test attribute "is_auto_layout"
     */
    public function testPropertyIsAutoLayout()
    {
    }

    /**
     * Test attribute "is_explicit_layout"
     */
    public function testPropertyIsExplicitLayout()
    {
    }

    /**
     * Test attribute "is_layout_sequential"
     */
    public function testPropertyIsLayoutSequential()
    {
    }

    /**
     * Test attribute "is_ansi_class"
     */
    public function testPropertyIsAnsiClass()
    {
    }

    /**
     * Test attribute "is_auto_class"
     */
    public function testPropertyIsAutoClass()
    {
    }

    /**
     * Test attribute "is_unicode_class"
     */
    public function testPropertyIsUnicodeClass()
    {
    }

    /**
     * Test attribute "is_com_object"
     */
    public function testPropertyIsComObject()
    {
    }

    /**
     * Test attribute "is_contextful"
     */
    public function testPropertyIsContextful()
    {
    }

    /**
     * Test attribute "is_enum"
     */
    public function testPropertyIsEnum()
    {
    }

    /**
     * Test attribute "is_marshal_by_ref"
     */
    public function testPropertyIsMarshalByRef()
    {
    }

    /**
     * Test attribute "is_primitive"
     */
    public function testPropertyIsPrimitive()
    {
    }

    /**
     * Test attribute "is_value_type"
     */
    public function testPropertyIsValueType()
    {
    }

    /**
     * Test attribute "is_signature_type"
     */
    public function testPropertyIsSignatureType()
    {
    }

    /**
     * Test attribute "is_security_critical"
     */
    public function testPropertyIsSecurityCritical()
    {
    }

    /**
     * Test attribute "is_security_safe_critical"
     */
    public function testPropertyIsSecuritySafeCritical()
    {
    }

    /**
     * Test attribute "is_security_transparent"
     */
    public function testPropertyIsSecurityTransparent()
    {
    }

    /**
     * Test attribute "struct_layout_attribute"
     */
    public function testPropertyStructLayoutAttribute()
    {
    }

    /**
     * Test attribute "type_initializer"
     */
    public function testPropertyTypeInitializer()
    {
    }

    /**
     * Test attribute "g_uid"
     */
    public function testPropertyGUid()
    {
    }

    /**
     * Test attribute "base_type"
     */
    public function testPropertyBaseType()
    {
    }

    /**
     * Test attribute "is_serializable"
     */
    public function testPropertyIsSerializable()
    {
    }

    /**
     * Test attribute "contains_generic_parameters"
     */
    public function testPropertyContainsGenericParameters()
    {
    }

    /**
     * Test attribute "is_visible"
     */
    public function testPropertyIsVisible()
    {
    }
}
